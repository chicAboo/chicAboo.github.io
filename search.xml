<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript之深入原型与原型链</title>
      <link href="/2019/10/11/js/JavaScript%E4%B9%8B%E6%B7%B1%E5%85%A5%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2019/10/11/js/JavaScript%E4%B9%8B%E6%B7%B1%E5%85%A5%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;天、惊雷一声，响彻神州大地，凄厉厉的大雨瞬间而至，街上行色匆匆，视线所致，一辆辆车，五颜六色的伞，夹杂着各色水声，来了又走，而留下的只有你形单影只。如人生一般，身边总有那么多的人来了又走……<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因项目增多，缺乏人手，最近面了一些工作多年的面试者，普遍现象，业务代码写的太多，而不太注重底层原理的加深。故这儿整理下一些常用方法的底层原来及实现，本文主要记录什么是原型，什么是原型链，以及他们之间的关系。</p><h3 id="二、原型"><a href="#二、原型" class="headerlink" title="二、原型"></a>二、原型</h3><h6 id="1、构造函数"><a href="#1、构造函数" class="headerlink" title="1、构造函数"></a>1、构造函数</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在讲解原型前，首先需要知道什么是构造函数，先看一个例子：<br> <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的例子就是一个构造函数，JavaScript默认函数首字母大写为构造函数，调用方式必须通过new关键字调用。上面的代码创建一个名为<code>Person</code>的构造函数，通过<code>new</code>实例出来一个实例对象<code>p</code>, 如下：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log<span class="params">(p.<span class="attr">constructor</span> === Person)</span>;   <span class="string">//</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>下面的图展示了实例p和构造函数Person之间的关系：<br><img src="/images/js/原型与原型链/构造函数与实例.jpg" alt="构造函数和实例的关系"></p><p>注：从上面打印的结果看，实例p应该会有一个constructor属性，指向的构造函数Person，其实并不是这样的。p本身并没有constructor属性，虽然p.constructor是指向了Person。原理是p.constructor被委托给了Person.prototype，而Person.prototype.constructor默认指向的时Person。</p><h3 id="2、prototype"><a href="#2、prototype" class="headerlink" title="2、prototype"></a>2、prototype</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JavaScript规定每一个函数都有一个<code>prototype</code>（原型）属性，这个属性是一个指针，指向原型对象，这样就可以包含特定类型的所有实例共享的属性和方法。如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">'zhangSan'</span>;</span><br><span class="line">Person.prototype.age = <span class="number">35</span>;</span><br><span class="line">Person.prototype.showInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p1.name, p2.name);  <span class="comment">// zhangSan zhangSan</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.showInfo === p2.showInfo); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.prototype.constructor === Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从上面的例子可看出，创建了一个空的构造函数<code>Person</code>，在Person的prototype属性中添加了属性和方法<code>name、age、showInfo</code>，并且在新创建的实例对象中，这些属性和方法是被实例所共享的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么prototype属性指向的是什么呢？例子中不难发现，prototype属性指向了一个对象，这个对象叫做<code>原型对象（Person.prototype）</code>， 而原型对象的constructor属性指向的是构造函数Person，从下面的可以直观的看出，构造函数和原型对象的关系：<br><img src="/images/js/原型与原型链/构造函数与原型对象.jpg" alt="构造函数和原型对象的关系"></p><h3 id="3、-proto"><a href="#3、-proto" class="headerlink" title="3、__proto__"></a>3、__proto__</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>__proto__</code>是JavaScript对象中特殊的内置属性，即对其他对象的一个引用。每当创建一个新实例后，该实例内部都包含一个指针（<code>__proto__</code>），指向原型对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p.__proto__ === Person.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>到此，已可以看出构造函数、原型对象、实例之间的关系，如下：<br><img src="/images/js/原型与原型链/构造函数、实例与原型对象.jpg" alt="构造函数、实例和原型对象的关系"></p><p>总结：每一个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。</p><h3 id="3、原型链"><a href="#3、原型链" class="headerlink" title="3、原型链"></a>3、原型链</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再讲原型链前，先回顾最开始讲的，Person.prototype.constructor默认是指向的Person，假如创建一个新的对象来替代Person.prototype的引用，那么会发生什么呢？看个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    name: <span class="string">'zhangSan'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p.constructor === Person); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(p.constructor === <span class="built_in">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看结果为什么Person.prototype.constructor指向了Object？因为改变了Person.prototype的引用，Person.prototype并不会自动获取.constructor属性。简单讲就是p并没有constructor属性，所以p会委托__proto__链上的Person.prototype，Person.prototype默认constructor属性已经被改变，所以这个对象上并没有constructor属性，它会继续委托，委托给最顶端的Object.prototype，这个对象的.constructor指向Object。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么如何让p.constructor指向Person呢？直接在Person.prototype中创建一个constructor属性即可，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: 'Person',</span><br><span class="line">    name: 'zhangSan',</span><br><span class="line">&#125;</span><br><span class="line">const p = new Person();</span><br><span class="line">console.log(p.<span class="keyword">constructor</span> === Person); // true</span><br><span class="line">console.log(p.<span class="keyword">constructor</span> === Object); // true</span><br><span class="line">console.log(Object.prototype.__proto__); // null</span><br></pre></td></tr></table></figure></p><p>故更新上面的图如下：<br><img src="/images/js/原型与原型链/原型链1.jpg" alt="原型链1"></p><p>总结：当查找实例属性时，如果找不到，就会查找与原型相关联的属性，一直往上找，直到最顶层。这样就构成了实例与原型的链条，叫做<code>原型链</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可能还没有太明白什么是原型链，再以原型链继承的方式，具体解释原型链的构成。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Man.prototype = <span class="keyword">new</span> Person(); <span class="comment">// 关键代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> Man();</span><br><span class="line"><span class="built_in">console</span>.log(m.constructor); <span class="comment">// Person</span></span><br><span class="line"><span class="built_in">console</span>.log(Man.prototype.__proto__ === Person.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>上面代码创建了两个构造函数Person、Man，第三行代码改变了Man.prototype的引用，本质上是重写了Man的原型对象，Man.prototype.constructor已不指向默认的Man了，而是指向了Person实例，而Person的实例的constructor会委托Person.prototype上，故m.constructor指向了Person，这样的一个过程就构成了原型链。如图：<br><img src="/images/js/原型与原型链/原型链2.jpg" alt="原型链2"></p><p>上面的图中，通过由相关联__proto__连接组成的链条结构，就是原型链。</p><h3 id="4、-方法"><a href="#4、-方法" class="headerlink" title="4、 方法"></a>4、 方法</h3><h6 id="1）、isPrototypeOf-方法"><a href="#1）、isPrototypeOf-方法" class="headerlink" title="1）、isPrototypeOf()方法"></a>1）、isPrototypeOf()方法</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现实中是无法访问到prototype，但可以通过一个方法（<code>isPrototypeOf()</code>）来确定对象之间是否存在这种关系，如果存在就返回true，否则false。以上面的例子为例，如下：<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">console</span>.log(<span class="type">Man</span>.proto<span class="keyword">type</span>.isPrototypeOf(m)); // true</span><br><span class="line"><span class="title">console</span>.log(<span class="type">Person</span>.proto<span class="keyword">type</span>.isPrototypeOf(m)); // true</span><br><span class="line"><span class="title">console</span>.log(<span class="type">Object</span>.proto<span class="keyword">type</span>.isPrototypeOf(m)); // true</span><br></pre></td></tr></table></figure></p><p>从上面的结果可以看出，prototype指向了调用<code>isPrototypeOf()</code>方法的对象Man.prototype，故这个方法返回true，因Person.prototype、Object.prototype都是存在同一条原型链上，故返回结果都都为true。</p><h6 id="2）、getPrototypeOf-方法"><a href="#2）、getPrototypeOf-方法" class="headerlink" title="2）、getPrototypeOf()方法"></a>2）、getPrototypeOf()方法</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ES5新增了Object.getPrototypeOf()返回对象的原型，即返回prototype。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(m) === Man.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h6 id="3）、hasOwnProperty-方法"><a href="#3）、hasOwnProperty-方法" class="headerlink" title="3）、hasOwnProperty()方法"></a>3）、hasOwnProperty()方法</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hasOwnProperty方法检测一个属性是否存在实例中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.age = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.name = <span class="string">'zhangSan'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p.hasOwnProperty(<span class="string">'name'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(p.hasOwnProperty(<span class="string">'age'</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>从结果看，hasOwnProperty()只能判断对象的属性在构造函数中，不能判断原型对象上的属性，那么如何判断原型对象上的属性呢？</p><h6 id="4）、in操作符"><a href="#4）、in操作符" class="headerlink" title="4）、in操作符"></a>4）、in操作符</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>in</code>操作符访问给定属性会返回true，无论该属性在原型对象上还是在构造函数上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.age = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.name = <span class="string">'zhangSan'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> p); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'age'</span> <span class="keyword">in</span> p); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>从上面看，同时使用in和hasOwnProperty()可判断一个属性在原型对象上，只需该属性在hasOwnProperty上为false，在in上为true即可，封装如下：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title">hasOwnProtorypeProperty</span>(object, name) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">!object.hasOwnProperty(name)</span> &amp;&amp; (name <span class="keyword">in</span> object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、结语"><a href="#5、结语" class="headerlink" title="5、结语"></a>5、结语</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;到此，已写完了，构造函数、原型、实例及之间的关系，同时通过实例指向原型对象的内部指针，一直到顶层Object.prototype，构成原型链。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;若文章中有不对的地方，欢迎指出。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3</title>
      <link href="/2019/08/20/css/CSS3/"/>
      <url>/2019/08/20/css/CSS3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CSS3整理归类"><a href="#CSS3整理归类" class="headerlink" title="CSS3整理归类"></a>CSS3整理归类</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CSS3新增了很多模块，比较重要的模块有：</p><blockquote><p>选择器<br>盒模型<br>背景和边框<br>蚊子特效<br>2D和3D转化<br>动画<br>多列布局<br>用户界面</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此文章主要表达常用CSS3的模块的定义，涉及一些简单例子。</p><h3 id="一、border-radius-圆角"><a href="#一、border-radius-圆角" class="headerlink" title="一、border-radius 圆角"></a>一、border-radius 圆角</h3><p>定义：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">border-radius: </span>a <span class="keyword">b </span>c d</span><br></pre></td></tr></table></figure></p><p>a、b、c、d分别表示对应位置的圆角，a表示：左上，b表示：右上，c表示：右下，d表示：左下。</p><p>如果border-radius只有三个值，如下：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">border-radius: </span>a <span class="keyword">b </span>c</span><br></pre></td></tr></table></figure></p><p>a表示：左上，b表示：右上和左下， c表示：右下</p><p>如果order-radius只有两个值，如下：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">border</span>-<span class="built_in">radius</span>: a b</span><br></pre></td></tr></table></figure></p><p>a表示：左上和右下， b表示：右上和左下</p><p>如果border-radius只有一个值，如下：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">border</span>-<span class="built_in">radius</span>: a</span><br></pre></td></tr></table></figure></p><p>a表示: 四个圆角值相同</p><p>border-radius可以单独表示每一个圆角：</p><blockquote><p>border-top-left-radius: a         左上<br>border-top-right-radius: a        右上<br>border-bottom-right-radius: a     右下<br>border-bottom-left-radius: a      左下</p></blockquote><p>例：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"box"</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.box</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">            <span class="comment">/*border-radius: 5px 10px 20px 30px;*/</span></span><br><span class="line">            <span class="comment">/*border-radius: 5px 10px 20px;*/</span></span><br><span class="line">            <span class="comment">/*border-radius: 5px 10px;*/</span></span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/css/br.png" alt="一个参数"></p><hr><h3 id="二、background背景"><a href="#二、background背景" class="headerlink" title="二、background背景"></a>二、background背景</h3><p>CSS3中为background提供了几种背景属性</p><blockquote><p>background-image: url(“图片地址1”), url(“图片地址2”)…  添加背景图片,多个图片用都好分隔，显示在最顶端的为第一张<br>background-size: length | percentage | cover | contain;   指定背景图片的大小<br>background-repeat: no-repeat   不重复<br>background-origin: content-box | padding-box | border-box 指定背景图片的位置区域<br>background-clip: content-box | padding-box | border-box 指定背景的绘制区域</p></blockquote><p>background-size：</p><blockquote><p>length: 设置背景图片的宽度和高度，第一个参数为宽度，第二个为高度,如果只给第一个值，第二个为auto<br>percentage: 相对于背景定位区域的百分比，第一个百分比为宽度，第二个为高度，只有第一个值，第二个为auto<br>cover：将图片缩放成完全覆盖定位区域的大小<br>contain: 将图片的缩放成适合背景定位区域的大小</p></blockquote><p>background-origin:</p><blockquote><p>padding-box: 背景图片填充框的相对位置<br>border-box: 背景图片边界框的相对位置<br>content-box: 背景图片相对位置的内容框</p></blockquote><p>background-clip:</p><blockquote><p>padding-box: 背景绘制在内边距方框内<br>border-box: 背景绘制在边框方框内<br>content-box: 被景绘制在内容区方框内</p></blockquote><hr><h3 id="三、gradients渐变"><a href="#三、gradients渐变" class="headerlink" title="三、gradients渐变"></a>三、gradients渐变</h3><p>CSS3提供的渐变可以让两个或多个指定颜色平稳过渡，有两种类型的渐变：</p><blockquote><p>线性渐变(linear-gradient)：向下 | 向上 | 向左 | 向右 方向渐变<br>径向渐变(radial-gradient)：有中心定义开始渐变</p></blockquote><p>线性渐变：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">linear-gradient</span><span class="params">(direction, color1, color2...)</span></span></span><br></pre></td></tr></table></figure></p><p>direction:</p><blockquote><p>to right 从左向右<br>to left 从右向左<br>to bottom right 从左上到右下<br>……</p></blockquote><p>径向渐变：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">radial-gradient</span><span class="params">(angle, color1, color2...)</span></span></span><br></pre></td></tr></table></figure></p><p>angle表示角度，指水平线和渐变线之间的角度，逆时针方向计算。</p><p>其他功能：</p><blockquote><p>使用多个颜色点       background: linear-gradient(red, green, blue);<br>使用透明度          background: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1));<br>重复的线性渐变       background: repeating-linear-gradient(red, yellow 10%, green 20%);<br>重复的径向渐变       background: repeating-radial-gradient(red, yellow 10%, green 15%);<br>设置形状            background: radial-gradient(circle, red, yellow, green);</p></blockquote><hr><h3 id="四、transform"><a href="#四、transform" class="headerlink" title="四、transform"></a>四、transform</h3><p>CSS3转换可以对元素进行移动、缩放、转动、拉长或拉伸。方法有：</p><blockquote><p>translate(x, y)： 根据左侧(x轴)和顶部(y轴)位置给定的参数，从当前元素位置移动。如translate(100px, 200px)从左侧开始向右移动100px,从顶部开始向下移动200px;<br>translate3D(x, y, z): 给定x，y，z参数，从当前位置移动。<br>rotate(angle)：给定度数顺时针旋转，如果是负数，则逆时针旋转指定角度。如rotate(30deg)表示顺时针旋转30度。<br>rotate3D(x, y, z, angle)：3D旋转<br>scale(x, y)：该元素增加和减少的大小，取决于x轴和y轴的参数。如scale(2, 3)表示宽度扩展为原来的两倍<br>scale3D(x, y, z)： 3D缩放转换<br>skew(<angle>, [<angle>])：分别表示x轴和y轴的倾斜度，第二个参数默认为0,负数为反方向倾斜<br>skewX(<angle>): x轴的倾斜度<br>skewY(<angle>): y轴的倾斜度<br>matrix(): 有六个参数，包含旋转，缩放，移动（平移）和倾斜功能<br>perspective(n): 为3D转换元素定义透视视图</angle></angle></angle></angle></p></blockquote><hr><h3 id="五、transition-过渡"><a href="#五、transition-过渡" class="headerlink" title="五、transition 过渡"></a>五、transition 过渡</h3><p>过渡是指从一种样式逐渐改变为另一种样式的效果。<br>过渡属性：</p><blockquote><p>transition-property: 过渡的css属性名称<br>transition-duration: 过渡所花费的时间，默认为0<br>transition-timing-function: 过渡效果的时间曲线，默认为”ease”（linear | ease | ease-in | ease-out | ease-in-out）<br>transition-delay: 延时多久开始过渡，即过渡效果的开始时间。<br>简写方式：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transition: <span class="keyword">property</span><span class="title"> </span>duration timing delay</span><br></pre></td></tr></table></figure></p></blockquote><p>例：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">transition</span>: width <span class="number">1s</span>;</span><br><span class="line"></span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="六、animation-动画"><a href="#六、animation-动画" class="headerlink" title="六、animation 动画"></a>六、animation 动画</h3><p>在说动画之前，首先要知道@keyframes的规则，@keyframes规则能创建动画，原理是将一套css样式转化为另外一套样式，从而达到动画的效果。首先开个例子：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> move &#123; <span class="comment">// move自定义名称</span></span><br><span class="line">    <span class="attribute">from</span>: &#123;<span class="attribute">top</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    <span class="attribute">to</span>: &#123;<span class="attribute">top</span>: <span class="number">200px</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> move_percent &#123;</span><br><span class="line">    <span class="selector-tag">0%</span>: &#123;<span class="attribute">left</span>: <span class="number">0</span>&#125;</span><br><span class="line">    <span class="selector-tag">10%</span>: &#123;<span class="attribute">left</span>: <span class="number">20px</span>&#125;</span><br><span class="line">    <span class="selector-tag">30%</span>: &#123;<span class="attribute">left</span>: <span class="number">50px</span>&#125;</span><br><span class="line">    <span class="selector-tag">50%</span>: &#123;<span class="attribute">left</span>: <span class="number">100px</span>&#125;</span><br><span class="line">    <span class="selector-tag">100%</span>: &#123;<span class="attribute">left</span>: <span class="number">200px</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>了解完@keyframes后，再来看看animation，animation的属性：</p><blockquote><p>animation-name: keyframes的名称<br>animation-duration: 完成一周动画所花费的秒或毫秒，默认为0<br>animation-timing-function: 过渡效果的时间曲线,默认为ease（linear | ease | ease-in | ease-out | ease-in-out）<br>animation-delay: 规定动画何时开始，默认为0<br>animation-iteration-count: 规定动画被播放的次数，默认为1<br>animation-direction: 规定动画是否在下一周期逆向地播放。默认是 “normal”（normal | alternate）<br>animation-play-state: 规定动画正在运行还是暂停，默认”running”（paused | running）<br>animation-animation-fill-mode : 规定对象动画时间之外的状态。(none | forwards | backwards | both)</p></blockquote><p>动画属性的简写：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation: <span class="built_in">name</span> duration timing <span class="built_in">delay</span> iteration direction play fill</span><br></pre></td></tr></table></figure></p><p>例：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> dropdown &#123;</span><br><span class="line">    0% &#123; <span class="attribute">margin-top</span>: <span class="number">0px</span>;&#125;</span><br><span class="line">   <span class="comment">/** 暂停效果 */</span></span><br><span class="line">   10% &#123; <span class="attribute">margin-top</span>: <span class="number">0px</span>;&#125;</span><br><span class="line">   50% &#123; <span class="attribute">margin-top</span>: -<span class="number">100px</span>;&#125;</span><br><span class="line">   60% &#123; <span class="attribute">margin-top</span>: -<span class="number">100px</span>;&#125;</span><br><span class="line">   90% &#123; <span class="attribute">margin-top</span>: -<span class="number">200px</span>;&#125;</span><br><span class="line">  100% &#123; <span class="attribute">margin-top</span>: -<span class="number">200px</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list</span> <span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line"> <span class="attribute">animation</span>: dropdown <span class="number">8s</span> linear infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> css3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/2019/04/15/js/Promise/"/>
      <url>/2019/04/15/js/Promise/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Promise对象是异步编程的一种接口，promise对象可以异步操作成功或失败分别绑定相应的方法，每一个异步任务都是一个promise对象，该对象上有then、catch、reject、resolve、all、race等等方法，让异步操作可以像同步方法那样返回值。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个promise可以有几种状态：</p><blockquote><p>pending: 初始状态，既不成功也不失败<br>fulfilled: 操作成功完成<br>rejected: 操作失败</p></blockquote><p>promise对象由构造方法+原型链组成，由于构造方法中的属性是不可重写、不可枚举，不可配置，因此只需要关注原型链上的方法。</p><h3 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h3><p><code>new Promise(function (resolve, reject) {//...})</code><br>resolve函数表示执行成功时调用<br>reject函数表示执行失败时调用</p><h3 id="三、then-方法"><a href="#三、then-方法" class="headerlink" title="三、then()方法"></a>三、then()方法</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;then方法是Promise链式调用的精髓，可以使用<code>.then()</code>的形式实现promise的链式调用，例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'异步操作1'</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>((<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'异步操作2'</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;));</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'异步操作3'</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">return</span> p2;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">return</span> p3;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res));</span><br></pre></td></tr></table></figure></p><p>结果：<br><img src="/images/js/promise1.jpg" alt="promise"><br>上面的方式可以很优雅的实现异步操作，避免以回调实现异步的多层嵌套。</p><h3 id="四、catch-方法"><a href="#四、catch-方法" class="headerlink" title="四、catch()方法"></a>四、catch()方法</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;调用resolve函数，可使用then()方法，接收resolve传过来的值，调用reject时，如何获取失败信息呢？Promise对象提供了catch方法，用于获取失败时的值。同样可使用链式的方式，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        reject(<span class="string">'异步操作失败1'</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">(resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        reject(<span class="string">'异步操作失败2'</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;));</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        reject(<span class="string">'异步操作失败3'</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p1.catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">return</span> p2;</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">return</span> p3;</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res));</span><br></pre></td></tr></table></figure></p><p><img src="/images/js/promise1.jpg" alt="promise"></p><h3 id="五、then-和catch-方法一起使用"><a href="#五、then-和catch-方法一起使用" class="headerlink" title="五、then()和catch()方法一起使用"></a>五、then()和catch()方法一起使用</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个完整的Promise对象可以有可能成功，也有可能失败，then和catch结合使用，即可实现不同状态下的开发，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxNumber</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (number &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">             resolve(<span class="string">'This number getter than '</span>+ number);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             reject(<span class="string">'This number less than '</span>+ number)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> getMaxNumber(<span class="number">101</span>)</span><br><span class="line">     .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))  <span class="comment">// This number getter than 101</span></span><br><span class="line">     .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br><span class="line"></span><br><span class="line"> getMaxNumber(<span class="number">99</span>)</span><br><span class="line">     .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line">     .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err)) <span class="comment">// This number less than 99</span></span><br></pre></td></tr></table></figure></p><p>上面代码，当传入的值是大于等于100是，调用resolve函数，通过then的回调打印值；当传入值为99，小于100，调用reject函数，通过catch回调打印值。结果如下：<br><img src="/images/js/promise3.jpg" alt="promise"></p><h3 id="六、all-方法"><a href="#六、all-方法" class="headerlink" title="六、all()方法"></a>六、all()方法</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Promise.all()方法提供了并行执行异步操作的能力，并在所有异步操作执行完成后才执行回调。<br>如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'第一个异步操作！'</span>);</span><br><span class="line">    &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'第二个异步操作！'</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'第三个异步操作！'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure></p><p>三个异步操作执行完成后，才能执行then方法，回调参数以数组的形式返回三个异步执行结果。如果三个异步操作中存在一个调用reject函数，all方法执行catch，打印err信息，如果多个异步操作都调用reject函数，则catch回调返回花费时间最少的异步操作，该例子只是并行执行的结果，没有异常的信息，打印结果如下：</p><p><img src="/images/js/promise4.png" alt="promise"><br>从all方法的用法可以很容易看出，可使用all进行预加载的。</p><h3 id="七、race-方法"><a href="#七、race-方法" class="headerlink" title="七、race()方法"></a>七、race()方法</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从上面的all方法知道，all可以使异步操作并行执行，当每一个promise对象都调用了reject函数时，catch回调返回用时最少的异步值。race方法的也是以用时最少的异步执行完成就结束，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            resolve(<span class="string">'第二个异步操作！'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="string">'第二个异步值大于10'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            resolve(<span class="string">'第三个异步操作！'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="string">'第三个异步值大于10'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([p1, p2, p3]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>上面例子有三个异步操作，使用race方法执行，当a小于10时，三个异步操作同时执行，调用resolve函数，当第一个异步操作执行完成后，程序结束，因此最终的结果是返回p3的resolve返回的执行的结果，如果a大于10，那么三个promise对象都调用reject函数，则catch接收的值是p3返回的值。故无论调用reject还是resolve函数，最终得到的结果都是以最快执行完成的为准。<br>知道race方法的用法，那么有什么用呢？想象一下，假设我需要异步请求一张图片，该如何做呢？可以使用回调的方式，如果用race该如何做呢？<br>先看下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestImg</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">            img.onLoad = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(img);</span><br><span class="line">            &#125;;</span><br><span class="line">            img.src = <span class="string">'xxxxxxxxxxxxx'</span>; <span class="comment">// 请换成可以请求的图片地址</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">timeout</span> (<span class="params">time</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                reject(<span class="string">'Picture request timeout！'</span>);</span><br><span class="line">            &#125;, time);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.race([requestImg(), timeout(<span class="number">5000</span>)])</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line">        .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error))</span><br></pre></td></tr></table></figure></p><p>上面代码执行结果会抛出错误：<span style="color:red">Picture request timeout！</span><br>requestImg会异步请求一张图片，timeout会延时指定时间抛出错误，使用race方法让requestImg和timeout一起执行，看谁执行的快，如果先请求成功，则执行then方法，如果超时，则执行catch方法抛出错误。</p><h3 id="八、finally-方法"><a href="#八、finally-方法" class="headerlink" title="八、finally()方法"></a>八、finally()方法</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finally方法返回一个promise，在promise结束时，无论结果是成功(fulfilled)和失败(rejected)都会执行finally方法。那么finally的用途就是在promise执行完成后需要做一些处理时使用，具体例子就不给出了。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery_Mulselect封装</title>
      <link href="/2019/03/12/jQuery/Mulselect/"/>
      <url>/2019/03/12/jQuery/Mulselect/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="下拉多选-Mulselect自定义封装"><a href="#下拉多选-Mulselect自定义封装" class="headerlink" title="下拉多选-Mulselect自定义封装"></a>下拉多选-Mulselect自定义封装</h3><h6 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h6><p><img src="/images/jquery/mulselect.jpg" alt="mulselect"><br>自定义下拉多选封装，首先分下，一个完整的自定义下拉的组成部分：</p><blockquote><ol><li>有个显示框，显示选中内容</li><li>有一个新增字段部分，包括一个输入框，一个新增按钮，不能新增重复名称，则需验证信息部分</li><li>下拉列表部分，左侧为复选框，右侧为字段名称</li></ol></blockquote><p>已经拆分完一个组件，只需按照功能要求组合起来，便完成一大部分了。<br>假设UI已经完成，现在分析逻辑：</p><blockquote><ol><li>实现方式：构造函数+原型链</li><li>创建一个Mulselect原型方法create，新增UI</li><li>创建一个方法checkedItem，绑定Mulselect的事件，选中、全选、反选</li><li>创建一个方法checkedStatus，判断是否全部选中</li><li>创建一个方法getCheckedValue，获取选中的值</li><li>创建一个方法addItem，新增项</li><li>将创建好的对象绑定要window和jQuery上</li></ol></blockquote><p>逻辑部分已经思考完成，根据逻辑可以很明确的知道需要配合的参数有什么，有新增项功能、有选中、全选、反选功能、选中展示功能，可以分析如下参数：</p><blockquote><ol><li>isShowAdd 是否显示新增部分  true为显示，默认为false</li><li>isCheckAll 是否启用全选功能  true为启用全选，默认false</li><li>showNumber 选中个数超过当前数显示显示个数 默认值为4</li><li>isOpen 是否默认展开列表 true为展开 默认为false</li><li>selectAllText  选择所有的文本 默认’全选’</li><li>chooseText 请选择项文本 默认’请选择项’</li><li>noDataText 暂无数据文本 默认’暂无数据’</li><li>canNotSameName 不能添加同名字段默认文本 默认’不能添加同名字段默认文本’</li><li>data [{ name: ‘字段名称’, disable: ‘是否禁用选择’}] disable为’disable’表示禁用，其他不禁用</li><li>getCheckedValue(option, element) 选中回调 option为选中字段数组， element当前下拉多选DOM</li></ol></blockquote><h6 id="创建构造函数"><a href="#创建构造函数" class="headerlink" title="创建构造函数"></a>创建构造函数</h6><p>首选需要创建构造函数，设置好默认字段，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MulSelect</span>(<span class="params">element, config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.element = element;</span><br><span class="line">    <span class="keyword">this</span>.config = &#123;</span><br><span class="line">        isShowAdd: <span class="literal">false</span>,                   <span class="comment">//是否显示新增项</span></span><br><span class="line">        isCheckAll: <span class="literal">false</span>,                  <span class="comment">//是否启用全选功能</span></span><br><span class="line">        showNumber: <span class="number">4</span>,                      <span class="comment">//选中显示的个数</span></span><br><span class="line">        isOpen: <span class="literal">false</span>,                      <span class="comment">//是否直接显示下拉</span></span><br><span class="line">        selectAllText: <span class="string">'全选'</span>,               <span class="comment">//全选默认文本</span></span><br><span class="line">        chooseText: <span class="string">'请选择值'</span>,               <span class="comment">//请选择值默认文本</span></span><br><span class="line">        noDataText: <span class="string">'暂无数据'</span>,               <span class="comment">//暂无数据默认文本</span></span><br><span class="line">        canNotSameName: <span class="string">'不能添加同名字段'</span>,    <span class="comment">//不能添加同名字段默认文本</span></span><br><span class="line">        data: [],                            <span class="comment">//下拉数据</span></span><br><span class="line">        getCheckedValue: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,     <span class="comment">//获取选中的值</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//扩展默认参数</span></span><br><span class="line">    <span class="keyword">if</span> (config &amp;&amp; $.isPlainObject(config)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.config = $.extend(&#123;&#125;, <span class="keyword">this</span>.config, config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="创建Mulselect静态方法"><a href="#创建Mulselect静态方法" class="headerlink" title="创建Mulselect静态方法"></a>创建Mulselect静态方法</h6><p>构造函数完成后，开始创建Mulselect静态页面，需要注意的是，因为设置了是否启用新增功能、是否启用全选功能，故这两个模块需要根据配置项判断是否启用，列表项需要传入的是数组，直接循环即可，具体代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">MulSelect.prototype.create = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="keyword">this</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            isShowAdd,</span><br><span class="line">            data,</span><br><span class="line">            isCheckAll,</span><br><span class="line">            isOpen,</span><br><span class="line">            selectAllText,</span><br><span class="line">            chooseText,</span><br><span class="line">            noDataText,</span><br><span class="line">        &#125; = _this.config;</span><br><span class="line">    <span class="keyword">let</span> _html = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> checkAllDisable = data.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.disable.length === <span class="number">0</span>;</span><br><span class="line">    &#125;).length === <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    _html += <span class="string">`</span></span><br><span class="line"><span class="string">                &lt;div class="mulselect"&gt;</span></span><br><span class="line"><span class="string">                    &lt;button type="button" class="mulselect-btn dropDownToggle" title="<span class="subst">$&#123;chooseText&#125;</span>" data-toggle="<span class="subst">$&#123;isOpen ? <span class="string">'open'</span> : <span class="string">'close'</span>&#125;</span>"&gt;</span></span><br><span class="line"><span class="string">                        &lt;span class="mulselect-text"&gt;<span class="subst">$&#123;chooseText&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                        &lt;b class="caret"&gt;&lt;/b&gt;</span></span><br><span class="line"><span class="string">                    &lt;/button&gt;</span></span><br><span class="line"><span class="string">                    &lt;ul class="mulselect-list <span class="subst">$&#123;isOpen ? <span class="string">''</span> : <span class="string">'none'</span>&#125;</span>"&gt;</span></span><br><span class="line"><span class="string">            `</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否显示新增栏</span></span><br><span class="line">    <span class="keyword">if</span> (isShowAdd) &#123;</span><br><span class="line">        _html += <span class="string">`</span></span><br><span class="line"><span class="string">                    &lt;li class="mulselect-item input"&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type="text" value="" class="add-col" placeholder="请输入新增项"&gt;</span></span><br><span class="line"><span class="string">                        &lt;button class="btn btn-add"&gt;增加&lt;/button&gt;</span></span><br><span class="line"><span class="string">                        &lt;p class="red-font text-center none vilExpression"&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">                    &lt;/li&gt;</span></span><br><span class="line"><span class="string">                `</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (data.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//是否显示全选</span></span><br><span class="line">        <span class="keyword">if</span> (isCheckAll) &#123;</span><br><span class="line">            _html += <span class="string">`</span></span><br><span class="line"><span class="string">                        &lt;li class="mulselect-item checked-item <span class="subst">$&#123;checkAllDisable ? <span class="string">'disable'</span> : <span class="string">''</span>&#125;</span>"&gt;</span></span><br><span class="line"><span class="string">                            &lt;input type="checkbox" name="checkAll" data-type="checkAll"&gt;</span></span><br><span class="line"><span class="string">                            <span class="subst">$&#123;selectAllText&#125;</span></span></span><br><span class="line"><span class="string">                        &lt;/li&gt;</span></span><br><span class="line"><span class="string">                    `</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            _html += <span class="string">`</span></span><br><span class="line"><span class="string">                        &lt;li class="mulselect-item checked-item <span class="subst">$&#123;item.disable&#125;</span>" title="<span class="subst">$&#123;item.name&#125;</span>"&gt;</span></span><br><span class="line"><span class="string">                            &lt;input type="checkbox" value="<span class="subst">$&#123;item.name&#125;</span>" name="mulItem" data-type="item"&gt;<span class="subst">$&#123;item.name&#125;</span></span></span><br><span class="line"><span class="string">                        &lt;/li&gt;</span></span><br><span class="line"><span class="string">                    `</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _html += <span class="string">`</span></span><br><span class="line"><span class="string">                    &lt;li class="mulselect-item text-center"&gt;</span></span><br><span class="line"><span class="string">                       &lt;span class="red-font"&gt;<span class="subst">$&#123;noDataText&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                    &lt;/li&gt;</span></span><br><span class="line"><span class="string">                `</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _html += <span class="string">`&lt;/ul&gt;&lt;/div&gt;`</span>;</span><br><span class="line"></span><br><span class="line">    _this.element.html(_html);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="创建显示隐藏列表方法"><a href="#创建显示隐藏列表方法" class="headerlink" title="创建显示隐藏列表方法"></a>创建显示隐藏列表方法</h6><p>完成Mulselect的静态页面创建，这里遇到个问题，需要隐藏和显示下拉多选列表，那么需要绑定显示框的点击事件，点击时判断显示和隐藏状态，如果列表展开状态，则隐藏，反之，则显示。需要注意的时，如果展开时，点击空白位置也需要隐藏，具体代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">MulSelect.prototype.showList = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> $selector = <span class="keyword">this</span>.element;</span><br><span class="line"></span><br><span class="line">    $selector.off(<span class="string">'click'</span>).on(<span class="string">'click'</span>, <span class="string">'.dropDownToggle'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">        <span class="keyword">const</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</span><br><span class="line">            _toggle = $<span class="keyword">this</span>.data(<span class="string">'toggle'</span>);</span><br><span class="line"></span><br><span class="line">        $(<span class="string">'.dropDownToggle'</span>).data(<span class="string">'toggle'</span>, <span class="string">'close'</span>);</span><br><span class="line">        $(<span class="string">'.mulselect-list'</span>).hide();</span><br><span class="line">        <span class="keyword">if</span> (_toggle === <span class="string">'close'</span>) &#123;</span><br><span class="line">            $<span class="keyword">this</span>.data(<span class="string">'toggle'</span>, <span class="string">'open'</span>);</span><br><span class="line">            $<span class="keyword">this</span>.addClass(<span class="string">'active'</span>);</span><br><span class="line">            $selector.find(<span class="string">'.mulselect-list'</span>).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $<span class="keyword">this</span>.data(<span class="string">'toggle'</span>, <span class="string">'close'</span>);</span><br><span class="line">            $<span class="keyword">this</span>.removeClass(<span class="string">'active'</span>);</span><br><span class="line">            $selector.find(<span class="string">'.mulselect-list'</span>).hide();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    $selector.on(<span class="string">'click'</span>, <span class="string">'.mulselect-list'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">        e.preventDefault();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $selector.find(<span class="string">'.mulselect-list'</span>).hide();</span><br><span class="line">        $selector.find(<span class="string">'.dropDownToggle'</span>).data(<span class="string">'toggle'</span>, <span class="string">'close'</span>).removeClass(<span class="string">'active'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="创建选中、全选、反选事件绑定方法"><a href="#创建选中、全选、反选事件绑定方法" class="headerlink" title="创建选中、全选、反选事件绑定方法"></a>创建选中、全选、反选事件绑定方法</h6><p>因为使用CheckBox来做选中、全选、反选，则判断是否选中只需考虑CheckBox的checked是否为true，则能判断当前选中的状态；如果是全选和反选，则需要判断当点击全选时，当前列表的所有CheckBox的checked是否全为true，故还需要一个判断当前下拉多选列表是否全选的状态。<br>是否全选状态代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MulSelect.prototype.checkedStatus =  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> checkedArr = [],</span><br><span class="line">        disableArr = [];</span><br><span class="line">    <span class="keyword">this</span>.element.find(<span class="string">'input[name="mulItem"]'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($(<span class="keyword">this</span>).is(<span class="string">':checked'</span>)) &#123;</span><br><span class="line">            checkedArr.push(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($(<span class="keyword">this</span>).parent().hasClass(<span class="string">'disable'</span>)) &#123;</span><br><span class="line">            disableArr.push(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.element.find(<span class="string">'input[name="mulItem"]'</span>).length === checkedArr.length + disableArr.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>选中、全选、反选代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">MulSelect.prototype.checkedItem = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="keyword">this</span>,</span><br><span class="line">        $selector = _this.element;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.element.on(<span class="string">'click'</span>, <span class="string">'input[type="checkbox"]'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">        <span class="keyword">const</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</span><br><span class="line">            $checkItem = $selector.find(<span class="string">"input[name='mulItem']"</span>),</span><br><span class="line">            $checkAll = $selector.find(<span class="string">"input[name='checkAll']"</span>),</span><br><span class="line">            _dataType = $<span class="keyword">this</span>.data(<span class="string">'type'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($<span class="keyword">this</span>.is(<span class="string">':checked'</span>)) &#123;</span><br><span class="line">            $<span class="keyword">this</span>.parent().addClass(<span class="string">'checked'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $<span class="keyword">this</span>.parent().removeClass(<span class="string">'checked'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (_dataType === <span class="string">'checkAll'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($<span class="keyword">this</span>.prop(<span class="string">"checked"</span>) === <span class="literal">true</span>) &#123;</span><br><span class="line">                $checkItem.prop(<span class="string">'checked'</span>, <span class="literal">true</span>);</span><br><span class="line">                $checkItem.parent().addClass(<span class="string">'checked'</span>);</span><br><span class="line">                $selector.find(<span class="string">'.disable'</span>).removeClass(<span class="string">'checked'</span>);</span><br><span class="line">                $selector.find(<span class="string">'.disable input'</span>).prop(<span class="string">'checked'</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $checkItem.prop(<span class="string">'checked'</span>, <span class="literal">false</span>);</span><br><span class="line">                $checkItem.parent().removeClass(<span class="string">'checked'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> ischeckedAll = _this.checkedStatus();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//是否全选</span></span><br><span class="line">            <span class="keyword">if</span> (ischeckedAll) &#123;</span><br><span class="line">                $checkAll.prop(<span class="string">'checked'</span>, <span class="literal">true</span>);</span><br><span class="line">                $checkAll.parent().addClass(<span class="string">'checked'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $checkAll.prop(<span class="string">'checked'</span>, <span class="literal">false</span>);</span><br><span class="line">                $checkAll.parent().removeClass(<span class="string">'checked'</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _this.getCheckedValue();</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    _this.element.on(<span class="string">'click'</span>, <span class="string">'.checked-item'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).find(<span class="string">'input[type="checkbox"]'</span>).click();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="获取选中状态的值"><a href="#获取选中状态的值" class="headerlink" title="获取选中状态的值"></a>获取选中状态的值</h6><p>已经完成了选中状态，需要返回选中的值，只需获取当前列表下CheckBox的checked为true的值，并存于一个数组中，通过回调函数返回即可，需要注意的是，构造函数中设置了showNumber参数，即当选中个数超出这个设置值时，则显示已选多少个数，这里需要判断一下，还有当全选并且选中的个数大于showNumber时显示全选，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">MulSelect.prototype.getCheckedValue =<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="keyword">this</span>,</span><br><span class="line">        checkedArr = [],</span><br><span class="line">        _string = <span class="string">''</span>,</span><br><span class="line">        &#123;showNumber, getCheckedValue, data, chooseText&#125; = _this.config;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.element.find(<span class="string">'input[name="mulItem"]'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> ($<span class="keyword">this</span>.is(<span class="string">':checked'</span>)) &#123;</span><br><span class="line">            checkedArr.push($<span class="keyword">this</span>.val());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    getCheckedValue(checkedArr, _this.element);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (showNumber &lt;= checkedArr.length) &#123;</span><br><span class="line">        _string = <span class="string">`<span class="subst">$&#123;checkedArr.length&#125;</span> selected`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _string = checkedArr.join(<span class="string">' , '</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (checkedArr.length === data.length &amp;&amp; showNumber &lt; checkedArr.length) &#123;</span><br><span class="line">        _string = <span class="string">`All selected(<span class="subst">$&#123;checkedArr.length&#125;</span>)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (checkedArr.length === <span class="number">0</span>) &#123;</span><br><span class="line">        _string = chooseText;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _this.element.find(<span class="string">'.mulselect-text'</span>).text(_string).attr(<span class="string">'title'</span>, _string);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="新增列表项"><a href="#新增列表项" class="headerlink" title="新增列表项"></a>新增列表项</h6><p>列表的下拉多选基本完成，现在做额外的功能，新增列表项功能，同名的列表项不能新增，触发新增的功能键为：新增按钮或enter，当新增框不为空并且没同名项时，点击新增，在列表的尾部添加一下，并选中，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">MulSelect.prototype.addItem = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="keyword">this</span>,</span><br><span class="line">        $selector = _this.element,</span><br><span class="line">        &#123;canNotSameName&#125; = _this.config;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增列</span></span><br><span class="line">    $selector.on(<span class="string">'click'</span>, <span class="string">'.btn-add'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">        <span class="keyword">const</span> _val = $(<span class="keyword">this</span>).prev().val();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_val.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> checkedArr = [];</span><br><span class="line">            $selector.find(<span class="string">'input[name="mulItem"]'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                checkedArr.push($(<span class="keyword">this</span>).val());</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (checkedArr.indexOf(_val) !== <span class="number">-1</span>) &#123;</span><br><span class="line">                $selector.find(<span class="string">'.vilExpression'</span>).text(canNotSameName).show();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $selector.find(<span class="string">'.vilExpression'</span>).hide();</span><br><span class="line"></span><br><span class="line">            _this.config.data.push(&#123;</span><br><span class="line">                name: <span class="string">`.<span class="subst">$&#123;_val&#125;</span>`</span>,</span><br><span class="line">                disable: <span class="string">''</span></span><br><span class="line">            &#125;);</span><br><span class="line">            _this.config.isOpen = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            $selector.find(<span class="string">'.mulselect-list'</span>).append(<span class="string">`</span></span><br><span class="line"><span class="string">                            &lt;li class="mulselect-item checked-item checked" title="<span class="subst">$&#123;_val&#125;</span>"&gt;</span></span><br><span class="line"><span class="string">                                &lt;input type="checkbox" value="<span class="subst">$&#123;_val&#125;</span>" name="mulItem" data-type="item" checked=true&gt;<span class="subst">$&#123;_val&#125;</span></span></span><br><span class="line"><span class="string">                            &lt;/li&gt;</span></span><br><span class="line"><span class="string">                        `</span>);</span><br><span class="line">            $selector.find(<span class="string">'.add-col'</span>).val(<span class="string">''</span>);</span><br><span class="line">            _this.getCheckedValue();</span><br><span class="line">            <span class="comment">// _this.create();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//enter新增</span></span><br><span class="line">    $selector.on(<span class="string">'keyup'</span>, <span class="string">'.add-col'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> _value = $(<span class="keyword">this</span>).val();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> checkedArr = [];</span><br><span class="line">            $selector.find(<span class="string">'input[name="mulItem"]'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                checkedArr.push($(<span class="keyword">this</span>).val());</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (checkedArr.indexOf(_value) !== <span class="number">-1</span>) &#123;</span><br><span class="line">                $selector.find(<span class="string">'.vilExpression'</span>).show().text(canNotSameName);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $selector.find(<span class="string">'.vilExpression'</span>).hide();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (e.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">                _this.config.data.push(&#123;</span><br><span class="line">                    name: _value,</span><br><span class="line">                    disable: <span class="string">''</span></span><br><span class="line">                &#125;);</span><br><span class="line">                _this.config.isOpen = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                $selector.find(<span class="string">'.mulselect-list'</span>).append(<span class="string">`</span></span><br><span class="line"><span class="string">                                &lt;li class="mulselect-item checked-item checked" title="<span class="subst">$&#123;_value&#125;</span>"&gt;</span></span><br><span class="line"><span class="string">                                    &lt;input type="checkbox" value="<span class="subst">$&#123;_value&#125;</span>" name="mulItem" data-type="item" checked=true&gt;<span class="subst">$&#123;_value&#125;</span></span></span><br><span class="line"><span class="string">                                &lt;/li&gt;</span></span><br><span class="line"><span class="string">                            `</span>);</span><br><span class="line">                _this.getCheckedValue();</span><br><span class="line">                $selector.find(<span class="string">'.add-col'</span>).val(<span class="string">''</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="封装到jQuery和window上"><a href="#封装到jQuery和window上" class="headerlink" title="封装到jQuery和window上"></a>封装到jQuery和window上</h6><p>到目前为止已经完成了下拉多选的封装，只需在jQuery和window上扩展可直接使用，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装到window对象上</span></span><br><span class="line"><span class="built_in">window</span>.MulSelect = MulSelect;</span><br><span class="line"><span class="comment">//封装到jquery对象上</span></span><br><span class="line">$.fn.MulSelect = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> mulSelect = <span class="keyword">new</span> MulSelect(<span class="keyword">this</span>, config);</span><br><span class="line">    <span class="keyword">return</span> mulSelect.init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>一个完整的jQuery下拉多选封装已经完成，目前只是处版，后期有时间会将功能扩展到多层级，完整代码已经上传GitHub，有兴趣<strong><a href="https://github.com/zhuLni/Mulselect" target="_blank" rel="noopener">狠狠的点击这儿</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 自定义功能封装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自定义功能封装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery_Pagination封装</title>
      <link href="/2019/03/11/jQuery/Pagination/"/>
      <url>/2019/03/11/jQuery/Pagination/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Pagination封装"><a href="#Pagination封装" class="headerlink" title="Pagination封装"></a>Pagination封装</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这段时间维护以前jQuery做的网站，优化了下分页的封装，主要使用的思想：构造函数+原型链的方式，将封装好的方法挂在到jQuery和window上，先上一个图：<br><img src="/images/jquery/pagination.jpg" alt="Pagination"></p><p>构造函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pagination</span> (<span class="params">element, config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ele = element;</span><br><span class="line">    <span class="keyword">this</span>.config = &#123;</span><br><span class="line">        currentPage: <span class="number">1</span>,</span><br><span class="line">        numberOfPages: <span class="number">3</span>,</span><br><span class="line">        total: <span class="number">1</span>,</span><br><span class="line">        isJumpPage: <span class="literal">true</span>,</span><br><span class="line">        jumpItems: &#123;</span><br><span class="line">            jumpTo: <span class="string">'jump to'</span>,</span><br><span class="line">            page: <span class="string">'page'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        itemTexts: &#123;</span><br><span class="line">            first: <span class="string">'&amp;lt;&amp;lt;'</span>,</span><br><span class="line">            prev: <span class="string">'&amp;lt;'</span>,</span><br><span class="line">            next: <span class="string">'&amp;gt;'</span>,</span><br><span class="line">            last: <span class="string">'&amp;gt;&amp;gt;'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        onPageChanged: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (config &amp;&amp; $.isPlainObject(config)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.config = $.extend(&#123;&#125;, <span class="keyword">this</span>.config, config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原型方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Pagination.prototype = &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  初始化</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  创建分页</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    createPagination: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  事件绑定</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    eventBind: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//分页事件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>window和jQuery上扩展：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.Pagination = Pagination;</span><br><span class="line">$.fn.Pagination = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pagination = <span class="keyword">new</span> Pagination(<span class="keyword">this</span>, config);</span><br><span class="line">    <span class="keyword">return</span> pagination.init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h6 id="1-基础分页"><a href="#1-基础分页" class="headerlink" title="1. 基础分页"></a>1. 基础分页</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.basePagination'</span>).Pagination(&#123;</span><br><span class="line">    isJumpPage: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>isJumpPage</code>是否显示可跳转输入框，默认true</p><h6 id="2-跳转指定页"><a href="#2-跳转指定页" class="headerlink" title="2. 跳转指定页"></a>2. 跳转指定页</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$('.pagePagination').Pagination(&#123;</span></span><br><span class="line"><span class="attr">    currentPage:</span> <span class="number">1</span><span class="string">,</span></span><br><span class="line"><span class="attr">    numberOfPages:</span> <span class="number">3</span><span class="string">,</span></span><br><span class="line"><span class="attr">    total:</span> <span class="number">6</span><span class="string">,</span></span><br><span class="line"><span class="attr">    isJumpPage:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><p><code>currentPage</code>当前页， numberOfPages中间显示个数(只能大于3的奇数)，total总页数</p><h6 id="3-文字设置"><a href="#3-文字设置" class="headerlink" title="3. 文字设置"></a>3. 文字设置</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$('.setPaginationWord').Pagination(&#123;</span></span><br><span class="line"><span class="attr">    currentPage:</span> <span class="number">1</span><span class="string">,</span></span><br><span class="line"><span class="attr">    numberOfPages:</span> <span class="number">3</span><span class="string">,</span></span><br><span class="line"><span class="attr">    total:</span> <span class="number">9</span><span class="string">,</span></span><br><span class="line"><span class="attr">    isJumpPage:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">    itemTexts:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        first:</span> <span class="string">'首页'</span><span class="string">,</span></span><br><span class="line"><span class="attr">        prev:</span> <span class="string">'上一页'</span><span class="string">,</span></span><br><span class="line"><span class="attr">        next:</span> <span class="string">'下一页'</span><span class="string">,</span></span><br><span class="line"><span class="attr">        last:</span> <span class="string">'最后一页'</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    jumpItems:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        jumpTo:</span> <span class="string">'跳转到'</span><span class="string">,</span></span><br><span class="line"><span class="attr">        page:</span> <span class="string">'页'</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><h6 id="4-跳转回调"><a href="#4-跳转回调" class="headerlink" title="4. 跳转回调"></a>4. 跳转回调</h6><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.jumpPaginationCallBack'</span>).Pagination(&#123;</span><br><span class="line">    currentPage: <span class="number">1</span>,</span><br><span class="line">    numberOfPages: <span class="number">3</span>,</span><br><span class="line">    total: <span class="number">12</span>,</span><br><span class="line">    isJumpPage:<span class="built_in"> true</span>,</span><br><span class="line">    itemTexts: &#123;</span><br><span class="line">        first: <span class="string">'首页'</span>,</span><br><span class="line">        prev: <span class="string">'上一页'</span>,</span><br><span class="line">        next: <span class="string">'下一页'</span>,</span><br><span class="line">       <span class="built_in"> last</span>: <span class="string">'最后一页'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    jumpItems: &#123;</span><br><span class="line">        jumpTo: <span class="string">'跳转到'</span>,</span><br><span class="line">        page: <span class="string">'页'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    onPageChanged: <span class="keyword">function</span> (<span class="keyword">option</span>, <span class="keyword">element</span>) &#123;</span><br><span class="line">        console.log(<span class="keyword">option</span>);</span><br><span class="line">        console.log(<span class="keyword">element</span>);</span><br><span class="line">        alert(`跳转到$&#123;<span class="keyword">option</span>.currentPage&#125;页`);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>isFooter</code>是否显示底部，true为显示，默认为true</p><h6 id="5-参数"><a href="#5-参数" class="headerlink" title="5. 参数"></a>5. 参数</h6><table><thead><tr><th>参数</th><th style="text-align:center">说明</th><th style="text-align:right">类型</th><th>默认值</th></tr></thead><tbody><tr><td>currentPage</td><td style="text-align:center">当前页</td><td style="text-align:right">Number</td><td>1</td></tr><tr><td>numberOfPages</td><td style="text-align:center">中间显示个数(只能是大于3的奇数)</td><td style="text-align:right">Number</td><td>3</td></tr><tr><td>total</td><td style="text-align:center">总页数</td><td style="text-align:right">Number</td><td>1</td></tr><tr><td>isJumpPage</td><td style="text-align:center">是否显示跳转页：true为显示</td><td style="text-align:right">Boolean</td><td>true</td></tr><tr><td>jumpItems:{jumpTo,page}</td><td style="text-align:center">跳转文本</td><td style="text-align:right">string</td><td>jump to、page</td></tr><tr><td>itemTexts{first、prev、next、last}</td><td style="text-align:center">文本</td><td style="text-align:right">string</td><td>&lt;&lt;、&lt;、&gt;、&gt;&gt;</td></tr></tbody></table><h6 id="6-方法"><a href="#6-方法" class="headerlink" title="6. 方法"></a>6. 方法</h6><table><thead><tr><th>参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>onPageChanged(option, element)</td><td style="text-align:left">选中回调(option：当前选中页的回调信息，element:分页DOM)</td></tr></tbody></table><p>完整代码已经上传到GitHub上，有兴趣可以<strong><a href="https://github.com/zhuLni/Pagination" target="_blank" rel="noopener">狠狠的点击这儿</a></strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 自定义功能封装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自定义功能封装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery_Dialog封装</title>
      <link href="/2019/03/01/jQuery/Dialog/"/>
      <url>/2019/03/01/jQuery/Dialog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="jQuery自定义Dialog封装"><a href="#jQuery自定义Dialog封装" class="headerlink" title="jQuery自定义Dialog封装"></a>jQuery自定义Dialog封装</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这段时间维护以前jQuery写的网站，里面涉及到很多弹框的功能，为方便使用jQuery封装了个模态框，模态框的封装主要使用构造函数和原型链结合的方式实现，然后在window和jQuery上扩展该方法，首先看一下效果：<br><img src="/images/jquery/dialog.jpg" alt="dialog"></p><p>构造函数代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dialog</span>(<span class="params">element, config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ele = element;</span><br><span class="line">    <span class="keyword">this</span>.config = &#123;</span><br><span class="line">        title: <span class="string">'信息提示框'</span>,</span><br><span class="line">        maskClick: <span class="literal">false</span>,</span><br><span class="line">        width: <span class="number">500</span>,</span><br><span class="line">        height: <span class="string">'auto'</span>,</span><br><span class="line">        content: <span class="string">''</span>,</span><br><span class="line">        isHeader: <span class="literal">true</span>,</span><br><span class="line">        isFooter: <span class="literal">true</span>,</span><br><span class="line">        onlyConfirm: <span class="literal">false</span>,</span><br><span class="line">        isContentCenter: <span class="literal">false</span>,</span><br><span class="line">        isConfirmClose: <span class="literal">true</span>,</span><br><span class="line">        isShowConnect: <span class="literal">false</span>,</span><br><span class="line">        confirmName: <span class="string">'确认'</span>,</span><br><span class="line">        cancelName: <span class="string">'取消'</span>,</span><br><span class="line">        connectionName: <span class="string">'连接测试'</span>,</span><br><span class="line">        confirmCallback: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        cancelCallback: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        connctionCallback: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//扩展默认参数</span></span><br><span class="line">    <span class="keyword">if</span> (config &amp;&amp; $.isPlainObject(config)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.config = $.extend(&#123;&#125;, <span class="keyword">this</span>.config, config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原型链上的方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Dialog.prototype = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        _this.create();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//创建弹框</span></span><br><span class="line">    create: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//事件绑定</span></span><br><span class="line">    eventBind: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//关闭弹窗</span></span><br><span class="line">    closeMask: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>window和jQuery上扩展：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装到window对象上</span></span><br><span class="line"><span class="built_in">window</span>.Dialog = Dialog;</span><br><span class="line"><span class="comment">//封装到jquery对象上</span></span><br><span class="line">$.fn.Dialog = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dialog = <span class="keyword">new</span> Dialog(<span class="keyword">this</span>, config);</span><br><span class="line">    <span class="keyword">return</span> dialog.init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h6 id="1-基础弹框"><a href="#1-基础弹框" class="headerlink" title="1. 基础弹框"></a>1. 基础弹框</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'body'</span>).Dialog(&#123;</span><br><span class="line">    content: <span class="string">'基础弹框测试'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>content</code>表示弹框的内容区，可自定义</p><h6 id="2-基础弹框测试-内容居中"><a href="#2-基础弹框测试-内容居中" class="headerlink" title="2. 基础弹框测试(内容居中)"></a>2. 基础弹框测试(内容居中)</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'body'</span>).Dialog(&#123;</span><br><span class="line">    title: <span class="string">'基础弹框(内容居中）'</span>,</span><br><span class="line">    content: <span class="string">'基础弹框测试'</span>,</span><br><span class="line">    isContentCenter: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>title</code>弹框的标题， isContentCenter表示是否居中，true为居中，默认为false</p><h6 id="3-不显示头部弹框"><a href="#3-不显示头部弹框" class="headerlink" title="3. 不显示头部弹框"></a>3. 不显示头部弹框</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$('body').Dialog(&#123;</span></span><br><span class="line"><span class="attr">    content:</span> <span class="string">'弹框测试'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    isContentCenter:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">    isHeader:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><p><code>isHeader</code>是否显示头部，true为显示，默认为true</p><h6 id="4-不显示底部弹框"><a href="#4-不显示底部弹框" class="headerlink" title="4. 不显示底部弹框"></a>4. 不显示底部弹框</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$('body').Dialog(&#123;</span></span><br><span class="line"><span class="attr">    content:</span> <span class="string">'不显示底部'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    isContentCenter:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">    isFooter:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><p><code>isFooter</code>是否显示底部，true为显示，默认为true</p><h6 id="5-点击空白关闭弹窗"><a href="#5-点击空白关闭弹窗" class="headerlink" title="5. 点击空白关闭弹窗"></a>5. 点击空白关闭弹窗</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$('body').Dialog(&#123;</span></span><br><span class="line"><span class="attr">    content:</span> <span class="string">'点击空白关闭弹窗'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    isContentCenter:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">    maskClick:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><p><code>maskClick</code>点击背景是否关闭弹窗，true为点击能关闭，默认false</p><h6 id="6-确认和取消回调"><a href="#6-确认和取消回调" class="headerlink" title="6. 确认和取消回调"></a>6. 确认和取消回调</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'body'</span>).Dialog(&#123;</span><br><span class="line">    content: <span class="string">'确认和取消回调'</span>,</span><br><span class="line">    isContentCenter: <span class="literal">true</span>,</span><br><span class="line">    maskClick: <span class="literal">true</span>,</span><br><span class="line">    confirmName: <span class="string">'点我确认'</span>,</span><br><span class="line">    cancelName: <span class="string">'点我取消'</span>,</span><br><span class="line">    confirmCallback: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'确认'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    cancelCallback: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'取消'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>confirmCallback</code>确认回调；<code>cancelCallback</code>取消回调</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h6 id="1-参数"><a href="#1-参数" class="headerlink" title="1. 参数"></a>1. 参数</h6><table><thead><tr><th>参数</th><th style="text-align:center">说明</th><th style="text-align:right">类型</th><th>默认值</th></tr></thead><tbody><tr><td>title</td><td style="text-align:center">标题</td><td style="text-align:right">string</td><td>信息提示框</td></tr><tr><td>maskClick</td><td style="text-align:center">点击背景是否关闭弹窗</td><td style="text-align:right">Boolean</td><td>false</td></tr><tr><td>content</td><td style="text-align:center">弹框内容，可添加HTML元素</td><td style="text-align:right">–</td><td>–</td></tr><tr><td>isHeader</td><td style="text-align:center">是否显示头部：true为显示</td><td style="text-align:right">Boolean</td><td>true</td></tr><tr><td>isFooter</td><td style="text-align:center">是否显示底部：true为显示</td><td style="text-align:right">Boolean</td><td>true</td></tr><tr><td>isContentCenter</td><td style="text-align:center">内容区是否水平居中显示，true为水平居中</td><td style="text-align:right">Boolean</td><td>false</td></tr><tr><td>onlyConfirm</td><td style="text-align:center">是否只显示确认按钮</td><td style="text-align:right">Boolean</td><td>false</td></tr><tr><td>confirmName</td><td style="text-align:center">确认按钮名称</td><td style="text-align:right">string</td><td>确认</td></tr><tr><td>cancelName</td><td style="text-align:center">取消按钮名称</td><td style="text-align:right">string</td><td>取消</td></tr></tbody></table><h6 id="2-方法"><a href="#2-方法" class="headerlink" title="2. 方法"></a>2. 方法</h6><table><thead><tr><th>参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>confirmCallback</td><td style="text-align:left">确认回调</td></tr><tr><td>cancelCallback</td><td style="text-align:left">取消回调</td></tr></tbody></table><p>完整代码已经上传到GitHub上，有兴趣可以<strong><a href="https://github.com/zhuLni/Dialog" target="_blank" rel="noopener">狠狠的点击这儿</a></strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 自定义功能封装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自定义功能封装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖函数和节流函数</title>
      <link href="/2019/02/27/js/%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E5%92%8C%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/"/>
      <url>/2019/02/27/js/%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E5%92%8C%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="一、初次接触防抖和节流函数"><a href="#一、初次接触防抖和节流函数" class="headerlink" title="一、初次接触防抖和节流函数"></a>一、初次接触防抖和节流函数</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;初次使用防抖和节流函数，之前做一个react项目时，有一块功能是这样的：notebook的每一个新建功能都是新的窗口，每一个编辑框下能支持Python和R语法，编辑框有初始高度，当编辑框内容增多时编辑框会随着增大。即功能要这样做，每一次keyDown时，我都会动态改变高度，再次渲染，那么出现个问题，每一个keyDown都会去更新一次react组件，如果用户一直按着enter时，会非常浪费性能。刚开始时，使用防抖函数，当时思路是每一次触发延迟200ms才能再次触发，似乎不够完善，节能函数便登场了。<br><img src="/images/js/jlsf.png" alt="节流算法来源"></p><h3 id="二、测试实例"><a href="#二、测试实例" class="headerlink" title="二、测试实例"></a>二、测试实例</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先说说为什么要使用防抖函数和节流函数，在网页开发过程中经常会遇到需要绑定触发某些功能的持续事件，如：mouseMove、scroll等事件，那么会很浪费性能，特别是极端情况下，这时就需要防抖和节流函数。防抖和节流函数都是优化事件高频执行的一种js方法。具体使用上面根据实际项目需求来。举个简单的例子，鼠标在浏览器上没move一次，count+1,如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"count"</span> style=<span class="string">"width: 100%; height: 500px; background-color: #ccc; font-size: 100px; color: #fff; display: flex; justify-content: center; align-items: center;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> aCount = <span class="built_in">document</span>.getElementById(<span class="string">'count'</span>);</span><br><span class="line"></span><br><span class="line">    aCount.onmousemove = accumulation;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">accumulation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        aCount.innerHTML = num++;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="/images/js/move.gif" alt="节流算法来源"><br>可以看到，每一次鼠标移动，函数都执行，这样频繁的执行，浪费了很多性能，特别是在大型项目中，如果电脑差点会导致网页卡顿的情况。</p><h3 id="三、防抖函数"><a href="#三、防抖函数" class="headerlink" title="三、防抖函数"></a>三、防抖函数</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>防抖是指函数在特定的时间内不再被调用执行</strong>。先看下函数，与原版有区别，原版使用的时call，这里使用的时apply。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">fn, _this, delay</span>) </span>&#123;</span><br><span class="line">     clearTimeout(fn.timeoutId);</span><br><span class="line">     fn.timeoutId = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">         fn.apply(_this, <span class="built_in">arguments</span>)</span><br><span class="line">     &#125;, delay);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的代码<strong>fn</strong>表示需要执行的函数，<strong>_this</strong>表示当前对象，<strong>delay</strong>表示延迟时间，<strong>obj</strong>表示函数传入所需的参数。即每次触发事件，函数延迟执行指定时间执行一次。使用防抖函数执行上面例子，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aCount.onmousemove = debounce(accumulation, <span class="literal">null</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用防抖函数处理鼠标移动，数字叠加的情况，间隔时间200ms，快速移动鼠标，每次触发都在200ms内，那么屏幕上就不会有count累加。如下：<br><img src="/images/js/fd_img.gif" alt="test"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这样和最初的想法有点背离，我想每次移动后，无论间隔是都在200ms内，我累加1，防抖函数无法实现。防抖函数的大多用途在表单验证的情况，用户输入后进行验证，是否合乎规定。错误则提示，如标红显示信息等。要实现上面的需求，需要使用节流函数。</p><h3 id="四、节流函数"><a href="#四、节流函数" class="headerlink" title="四、节流函数"></a>四、节流函数</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;节流函数，<strong>节流是指在连续触发事件，但只在指定时间内执行一次</strong>。大多使用场景，如：输入框输入请求，监听页面元素滚动，鼠标事件等高频触发事件。那么使用节流无论change的间隔在200ms内还是在200ms外，间隔200ms都执行打印。如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****</span></span><br><span class="line"><span class="comment"> **  改进节流函数函数</span></span><br><span class="line"><span class="comment"> **  @param fn 待执行的函数</span></span><br><span class="line"><span class="comment"> **  @param context this</span></span><br><span class="line"><span class="comment"> **  @param delay 延迟时间</span></span><br><span class="line"><span class="comment"> **  @param text 输入框文本</span></span><br><span class="line"><span class="comment"> **  @param applyTime 必须执行的时间</span></span><br><span class="line"><span class="comment"> ** **/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span> (<span class="params">fn, context, delay, text, applyTime</span>) </span>&#123;</span><br><span class="line">    clearTimeout(fn.timer);</span><br><span class="line">    fn._currTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录第一次执行的时间</span></span><br><span class="line">    <span class="keyword">if</span> (!fn._startTime) &#123;</span><br><span class="line">        fn._startTime = fn._currTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果时间间隔大于必须执行的时间，则执行，否则延迟执行</span></span><br><span class="line">    <span class="keyword">if</span> (fn._currTime - fn._startTime &gt; applyTime) &#123;</span><br><span class="line">        fn.call(context, text);</span><br><span class="line">        fn._startTime = fn._currTime;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fn.timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            fn.call(context, text);</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的问题调用如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aCount.onmousemove = throttle(accumulation, <span class="literal">null</span>, <span class="number">200</span>, val, <span class="number">200</span>);</span><br></pre></td></tr></table></figure></p><p>显示如下：<br><img src="/images/js/throttle_img.gif" alt="test"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这样就能完美解决无论什么情况都指定时间内执行。</p><h3 id="五、例子"><a href="#五、例子" class="headerlink" title="五、例子"></a>五、例子</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;回到最初的问题，编辑框每次<em>enter</em>时，更新组件，增加编辑框的高度；每次<em>backspace</em>时，<br>更新组件，减小编辑框的高度。单纯问题描述上看，对性能问题没什么太大的影响，我换个描述，问题就严重了。新增notebook会新开窗口，这儿是最外层，每个窗口下面有n个编辑框，然后再是正在编辑的编辑框，每一层都有很复杂的逻辑，我每次对编辑框keyDown时，首先需要找到对应的窗口，对应的编辑框，然后才改变编辑框的高度，貌似不是太复杂。但是我一直按着enter，每次都要从最外层组件开始更新，这样无疑浪费了很多性能。故优化方法，可使用防抖函数或节能函数。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这里使用防抖函数会出现问题，假如使用防抖函数，即延时一定时间执行一次，假定时间为200ms，我一直按着enter，不断地再触发事件，间隔永远小于200ms，则一直不会执行。故这里应该使用节能函数，无论如何测试，设置特定的时间，那么每次在这个时间都会执行。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用一个打印输入框值得情况来模拟上面描述的问题，问题：用户在input中输入字符，每200ms就需打印输入的内容，实现如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"inputValue:"</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aInput = <span class="built_in">document</span>.getElementById(<span class="string">'Input'</span>);</span><br><span class="line"></span><br><span class="line">aInput.addEventListener(<span class="string">'keyup'</span>, (e) =&gt; &#123;</span><br><span class="line">    throttle(test, <span class="literal">null</span>, <span class="number">200</span>, e.target.value, <span class="number">200</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这样完美解决频繁触发造成性能浪费的问题，notebook项目的问题也以这种优雅的方式解决了。防抖和节能函数在实际项目中几乎都可以使用到，如果你看到了这儿，那么还等什么，快到你项目中使用吧。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小西柚的到来</title>
      <link href="/2019/02/24/records/%E5%B0%8F%E8%A5%BF%E6%9F%9A%E7%9A%84%E5%88%B0%E6%9D%A5/"/>
      <url>/2019/02/24/records/%E5%B0%8F%E8%A5%BF%E6%9F%9A%E7%9A%84%E5%88%B0%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="/images/records/my_baby.jpg" alt="小西柚"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;转眼间28个年头已过，像微风般拂过脸庞，没有一丝察觉，却已悄然而逝。经历去年一年的辛苦经营，终于在开年时收到了一个巨大的礼物，似那么的惹人怜爱，不敢轻易触碰。虽然早已做好了准备，但你的到来，却仍然让人手足无措。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还记得，第一次抱你时，你睁开一只眼睛看我时的怦然心动，在长时间的对视中，另一只眼也缓缓睁开，充满好奇。我想，你心里应该很疑惑，这位大叔是谁，为什么那么激动的看着我。看着不大不小的眼睛，像极了妈妈，虽然别人都说像我多一点，我仍觉得像妈妈多一点。经历了第一次换尿布，第一次喂奶，第一次换衣服，第一次洗澡…我们之间已经有了更深层次的感情，你的每次一次成长，都是我经受困难更坚决的努力，不放弃。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在此，辛苦妈妈十月怀胎，为了你付出了巨大的辛苦。有那么多美食不能吃，漂亮的衣服不能穿，为了你的到来经受了巨大的痛苦，之后的日子还要经历很长时间的艰辛。妈妈已经为你付出了那么多，我又有什么理由不更加努力，不对她更好呢？</p>]]></content>
      
      
      <categories>
          
          <category> records </category>
          
      </categories>
      
      
        <tags>
            
            <tag> records </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-数据结构-链表</title>
      <link href="/2019/02/22/dataStructure/js-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/"/>
      <url>/2019/02/22/dataStructure/js-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="什么是链表？"><a href="#什么是链表？" class="headerlink" title="什么是链表？"></a>什么是链表？</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链表是由一组节点组成的集合。每个节点都使用一个对象的引用指向它的后继。指向另一 个节点的引用叫做链表。其中链表分为<strong>基本链表、双向链表及循环链表</strong>，如下图：<br><img src="/images/dataStructure/linkedList.jpg" alt="LinkedList"></p><h3 id="基本链表"><a href="#基本链表" class="headerlink" title="基本链表"></a>基本链表</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面讲过，栈和队列使用数组模拟，在JavaScript中数组被模拟成对象，相比于其他语言（如java或C++），效率明显低了很多，如果使用数组比较慢的情况，那么就应该使用链表。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先定义一个链表，链表中包含两个节点，Node类表示头节点，LinkedList类提供链表的插入、删除、查找、显示等辅助方法。</p><h5 id="Node类"><a href="#Node类" class="headerlink" title="Node类"></a>Node类</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node类包含两个属性：element属性用来保存节点上的元素，next属性指向下一个节点，Node的构造函数实现，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  节点构造函数</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.element = element;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="LinkedList类"><a href="#LinkedList类" class="headerlink" title="LinkedList类"></a>LinkedList类</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedList类提供了链表的<strong>插入、删除、查找、显示</strong>等操作，LinkedList类的构造函数实现如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  链表构造函数</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LList</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.head = <span class="keyword">new</span> Node(<span class="string">'head'</span>);</span><br><span class="line">    <span class="keyword">this</span>.find = find;</span><br><span class="line">    <span class="keyword">this</span>.insert = insert;</span><br><span class="line">    <span class="keyword">this</span>.findPrev = findPrev;</span><br><span class="line">    <span class="keyword">this</span>.remove = remove;</span><br><span class="line">    <span class="keyword">this</span>.display = display;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>默认head节点指向为空，当有节点插入时指向下一个节点，find方法为查找链表指定元素，insert方法指在链表指定节点后插入元素，findPrev方法指查找链表上一个元素，remove方法指删除指定元素，display方法指遍历链表，显示链表元素。</p><h5 id="find方法"><a href="#find方法" class="headerlink" title="find方法"></a>find方法</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;find方法用于遍历链表，查找指定元素，并返回指定元素节点，实现如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  遍历链表，查找链表指定节点</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从头节点开始遍历，查找到给定元素，结束循环</span></span><br><span class="line">    <span class="keyword">while</span> (currNode.element !== item) &#123;</span><br><span class="line">        currNode = currNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>find()</strong>演示了遍历链表的过程。</p><h5 id="insert方法"><a href="#insert方法" class="headerlink" title="insert方法"></a>insert方法</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;插入节点前，首先需要创建一个新节点，将链表头节点复值给新创建节点，并查找指定元素(<strong>find()</strong>)，在指定元素后插入新节点。插入方法，将新节点的next指向当前元素的next，当前元素的next指向新节点。如图：</p><p><img src="/images/dataStructure/insert.jpg" alt="链表的插入"><br>代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  在链表指定节点中插入元素</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span> (<span class="params">newElement, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(newElement);</span><br><span class="line">    <span class="keyword">var</span> currentNode = <span class="keyword">this</span>.find(item);</span><br><span class="line">    newNode.next = currentNode.next;</span><br><span class="line">    newNode.previous = currentNode;</span><br><span class="line">    currentNode.next = newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="display方法"><a href="#display方法" class="headerlink" title="display方法"></a>display方法</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display方法用于显示链表上的节点，故需要遍历链表，每次循环打印出当前节点，并将当前节点的next指向下一个节点，直到null时结束。代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  展示链表的所有元素</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!(currNode.next == <span class="literal">null</span>)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(currNode.next.element + <span class="string">','</span>);</span><br><span class="line">        currNode = currNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="findPrev方法"><a href="#findPrev方法" class="headerlink" title="findPrev方法"></a>findPrev方法</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;findPrev方法查找链表指定节点的前一个元素，并返回该节点。遍历链表，如果当前节点的下一个元素的element等于指定元素，择找到指定元素的前一个元素，返回。代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  查找指定元素上一个元素</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findPrev</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currNode = <span class="keyword">this</span>.head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currNode.next !== <span class="literal">null</span> &amp;&amp; currNode.next.element !== item) &#123;</span><br><span class="line">        currNode = currNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove方法删除指定元素，在删除指定元素前需要找到指定元素的前一个元素，并改变前一个元素的指针，将前一个元素的next指向前一个元素的next的next，如图：</p><p><img src="/images/dataStructure/remove.jpg" alt="链表删除"><br>代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  删除链表指定元素</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prevNode = <span class="keyword">this</span>.findPrev(item);</span><br><span class="line">    <span class="keyword">if</span> (prevNode.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        prevNode.next = prevNode.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这里基本链表的常用方法已经完成，该是测试代码的时候了，做点简单的增删功能试试。</p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设需要向链表中依此插入A、B、C、D，然后在A的后面插入H，删除B和C。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> city = <span class="keyword">new</span> LList();</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'插入'</span>);</span><br><span class="line">city.insert(<span class="string">'A'</span>, <span class="string">'head'</span>);</span><br><span class="line">city.insert(<span class="string">'B'</span>, <span class="string">'A'</span>);</span><br><span class="line">city.insert(<span class="string">'C'</span>, <span class="string">'B'</span>);</span><br><span class="line">city.insert(<span class="string">'D'</span>, <span class="string">'C'</span>);</span><br><span class="line">city.insert(<span class="string">'H'</span>, <span class="string">'A'</span>);</span><br><span class="line">city.display();</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'-----------------'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'删除'</span>);</span><br><span class="line">city.remove(<span class="string">'B'</span>);</span><br><span class="line">city.remove(<span class="string">'C'</span>);</span><br><span class="line">city.display();</span><br></pre></td></tr></table></figure></p><p>执行结果：<br><img src="/images/dataStructure/insert_or_remove_test.png" alt="例子"></p>]]></content>
      
      
      <categories>
          
          <category> js数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data-structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex-骰子布局</title>
      <link href="/2019/02/13/css/flex-%E9%AA%B0%E5%AD%90%E5%B8%83%E5%B1%80/"/>
      <url>/2019/02/13/css/flex-%E9%AA%B0%E5%AD%90%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h3><ul><li><ol><li>概念</li></ol></li><li><ol start="2"><li>flex容器的属性<ul><li>2.1.  flex-direction</li><li>2.2.  flex-wrap</li><li>2.3.  flex-flow</li><li>2.4.  justify-content</li><li>2.5.  align-items</li><li>2.6.  align-content</li></ul></li></ol></li><li><ol start="3"><li>项目的属性<ul><li>3.1.  order</li><li>3.2. flex-grow</li><li>3.3. flex-shrink</li><li>3.4. flex-basis</li><li>3.5. flex</li><li>3.6. align-self</li></ul></li></ol></li><li><ol start="4"><li>flex布局实践（骰子布局）</li></ol></li><li><ol start="5"><li>总结</li></ol></li><li><ol start="6"><li>源码</li></ol></li></ul><hr><hr><h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flex布局称为flex容器，flex容器默认两根轴：水平主轴和垂直交叉轴。以下概念都围绕水平主轴和垂直交叉轴而定义。<br><img src="/images/css/flex/1.png" alt="flex"></p><h3 id="二、flex容器的属性"><a href="#二、flex容器的属性" class="headerlink" title="二、flex容器的属性"></a>二、flex容器的属性</h3><p>以下6个属性设置在容器上。</p><blockquote><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul></blockquote><h6 id="1-flex-direction-决定主轴的方向"><a href="#1-flex-direction-决定主轴的方向" class="headerlink" title="1. flex-direction 决定主轴的方向"></a>1. flex-direction 决定主轴的方向</h6><blockquote><ul><li>row(默认值): 主轴水平方向，左端为起点</li><li>row-reverse: 主轴水平方向，右端为起点</li><li>column: 主轴垂直方向，上端为起点</li><li>column-reverse: 主轴垂直方向，下端为起点</li></ul></blockquote><h6 id="2-flex-wrap-项目是否排列在轴线上，是否换行属性"><a href="#2-flex-wrap-项目是否排列在轴线上，是否换行属性" class="headerlink" title="2. flex-wrap 项目是否排列在轴线上，是否换行属性"></a>2. flex-wrap 项目是否排列在轴线上，是否换行属性</h6><blockquote><ul><li>nowrap(默认值): 不换行</li><li>wrap: 换行，第一行在上方</li><li>wrap-reverse: 换行，第一行在下方</li></ul></blockquote><h6 id="3-flex-flow-flex-direction和flex-wrap的简写"><a href="#3-flex-flow-flex-direction和flex-wrap的简写" class="headerlink" title="3. flex-flow:  flex-direction和flex-wrap的简写"></a>3. flex-flow:<flex-direction> <flex-wrap> flex-direction和flex-wrap的简写</flex-wrap></flex-direction></h6><h6 id="4-justify-content-定义主轴上的对其方式"><a href="#4-justify-content-定义主轴上的对其方式" class="headerlink" title="4. justify-content 定义主轴上的对其方式"></a>4. justify-content 定义主轴上的对其方式</h6><blockquote><ul><li>flex-start(默认值): 左对齐</li><li>flex-end: 右对齐</li><li>center: 居中</li><li>space-between: 两端对其，项目间间距相等</li><li>space-around: 每个项目两端的间距相等</li></ul></blockquote><h6 id="5-align-items-项目在交叉线上的对齐方式"><a href="#5-align-items-项目在交叉线上的对齐方式" class="headerlink" title="5. align-items 项目在交叉线上的对齐方式"></a>5. align-items 项目在交叉线上的对齐方式</h6><blockquote><ul><li>flex-start: 交叉线的起点对齐</li><li>flex-end: 交叉线的终点对齐</li><li>center: 交叉线的中心对齐</li><li>baseline: 项目第一行文字的基线对齐</li><li>stretch(默认值): 如果项目未设置高度或auto,将占满容器的高度</li></ul></blockquote><h6 id="6-align-content-多行对其，如果只有一行，不起作用"><a href="#6-align-content-多行对其，如果只有一行，不起作用" class="headerlink" title="6. align-content 多行对其，如果只有一行，不起作用"></a>6. align-content 多行对其，如果只有一行，不起作用</h6><blockquote><p>flex-start: 与交叉点的起点对齐</p><ul><li>flex-end: 与交叉点的终点对齐</li><li>center: 与交叉点的中心对齐</li><li>space-between: 与交叉线两端对齐，轴线间间隔平均分配</li><li>space-around: 每根轴线间隔相等</li><li>stretch: 轴线占满整个交叉线</li></ul></blockquote><h3 id="三、项目的属性"><a href="#三、项目的属性" class="headerlink" title="三、项目的属性"></a>三、项目的属性</h3><p>以下6个属性设置在项目上。</p><blockquote><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ul></blockquote><h6 id="1-order定义项目的排列顺序，值越小越靠前，默认为0"><a href="#1-order定义项目的排列顺序，值越小越靠前，默认为0" class="headerlink" title="1. order定义项目的排列顺序，值越小越靠前，默认为0"></a>1. <code>order</code>定义项目的排列顺序，值越小越靠前，默认为0</h6><blockquote><p>.item {<br>  &nbsp;&nbsp;&nbsp;&nbsp;order: <integer>;<br>}</integer></p></blockquote><h6 id="2-flex-grow定义项目的放大比例，默认为0"><a href="#2-flex-grow定义项目的放大比例，默认为0" class="headerlink" title="2. flex-grow定义项目的放大比例，默认为0"></a>2. <code>flex-grow</code>定义项目的放大比例，默认为0</h6><blockquote><p>.item {<br> &nbsp;&nbsp;&nbsp;&nbsp; flex-grow: <number>;<br>}</number></p></blockquote><p>如果flex-grow为1，则项目等分，如果有一个为2，其他为1，则该项目是其他项目的两倍。</p><h6 id="3-flex-shrink定义项目的缩小比例，默认值为1。"><a href="#3-flex-shrink定义项目的缩小比例，默认值为1。" class="headerlink" title="3. flex-shrink定义项目的缩小比例，默认值为1。"></a>3. <code>flex-shrink</code>定义项目的缩小比例，默认值为1。</h6><blockquote><p>.item {<br>  &nbsp;&nbsp;&nbsp;&nbsp;flex-shrink: <number>;<br>}</number></p></blockquote><p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效</p><h6 id="4-flex-basis定义在分配空间之前，项目占主轴空间，默认值为auto。"><a href="#4-flex-basis定义在分配空间之前，项目占主轴空间，默认值为auto。" class="headerlink" title="4. flex-basis定义在分配空间之前，项目占主轴空间，默认值为auto。"></a>4. <code>flex-basis</code>定义在分配空间之前，项目占主轴空间，默认值为auto。</h6><blockquote><p>.item {<br>  &nbsp;&nbsp;&nbsp;&nbsp;flex-basis: <length> | auto;<br>}</length></p></blockquote><p>它可以设为跟width或height属性一样的值（比如250px），则项目将占据固定空间。</p><h6 id="5-flex属性是flex-grow-flex-shrink-和-flex-basis的简写，默认值为0-1-auto。后两个属性可选。"><a href="#5-flex属性是flex-grow-flex-shrink-和-flex-basis的简写，默认值为0-1-auto。后两个属性可选。" class="headerlink" title="5. flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。"></a>5. <code>flex</code>属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</h6><blockquote><p>.item {<br>  &nbsp;&nbsp;&nbsp;&nbsp;flex: none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]<br>}</p></blockquote><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。习惯使用这个属性。</p><h6 id="6-align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性-默认值为auto。"><a href="#6-align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性-默认值为auto。" class="headerlink" title="6. align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性, 默认值为auto。"></a>6. <code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性, 默认值为auto。</h6><blockquote><p>.item {<br>  &nbsp;&nbsp;&nbsp;&nbsp;align-self: auto | flex-start | flex-end | center | baseline | stretch;<br>}</p></blockquote><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p><h3 id="四、flex布局实践（骰子布局）"><a href="#四、flex布局实践（骰子布局）" class="headerlink" title="四、flex布局实践（骰子布局）"></a>四、flex布局实践（骰子布局）</h3><p>假设骰子的一面最多可以放9个点。<br><img src="/images/css/flex/2.png" alt="point"></p><p>下面来说如何使用flex布局骰子，html默认为</p><pre><code>&lt;div class=&quot;box&quot;&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p>.box元素代表flex容器，.item元素代表一个项目，需要几个项目就有几个class为item的div元素。</p><h6 id="1-单项目"><a href="#1-单项目" class="headerlink" title="1. 单项目"></a>1. 单项目</h6><p>1.1 首先左上角一个点，默认情况即可。<br><img src="/images/css/flex/3.png" alt="flex"></p><pre><code>.box {    width: 60px;    height: 60px;    border: 1px solid white;    background: white;    border-radius: 5px;    display: flex;    margin: 10px;}</code></pre><p>.box的样式为以上，下面所有都依据这个来的。</p><p>1.2  黑点在第一行居中对齐，使用justify-content: center即可。<br><img src="/images/css/flex/4.png" alt="flex"></p><pre><code>.box.one1 {    flex-direction: row;   /* 默认值可以不写*/    justify-content: center;}</code></pre><p>1.3  黑点在第一行右对齐，使用justify-content: flex-end。<br><img src="/images/css/flex/5.png" alt="flex"></p><pre><code>.box.one2 {    justify-content: flex-end;}</code></pre><p>1.4 黑点在第二行第一个，转化为垂直交叉线排列方式，居中即可。<br><img src="/images/css/flex/6.png" alt="flex"></p><pre><code>.box.one3 {    align-items: center;}</code></pre><p>1.5 黑点垂直水平居中<br><img src="/images/css/flex/7.png" alt="flex"></p><pre><code>.box.one4 {    align-items: center;    justify-content: center;}</code></pre><p>1.6  黑点在第二行右侧<br><img src="/images/css/flex/8.png" alt="flex"></p><pre><code>.box.one5 {    align-items: center;    justify-content: flex-end;}</code></pre><p>1.7 黑点在最后一行第一个<br><img src="/images/css/flex/9.png" alt="flex"></p><pre><code>.box.one6 {    align-items: flex-end;}</code></pre><p>1.8 黑点在最后一行居中<br><img src="/images/css/flex/11.png" alt="flex"></p><pre><code>.box.one7 {    align-items: flex-end;    justify-content: center;}</code></pre><p>1.9 黑点在最后一行最后一个<br><img src="/images/css/flex/12.png" alt="flex"></p><pre><code>.box.one8 {    align-items: flex-end;    justify-content: flex-end;}</code></pre><h6 id="2-双项目"><a href="#2-双项目" class="headerlink" title="2. 双项目"></a>2. 双项目</h6><p>html模版为</p><pre><code>&lt;div class=&quot;box&quot;&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p>2.1 第一行左右布局<br><img src="/images/css/flex/13.png" alt="flex"></p><pre><code>.box.two1 {    justify-content: space-between;}</code></pre><p>2.2 左侧上下布局<br><img src="/images/css/flex/14.png" alt="flex"></p><pre><code>.box.two2 {      flex-direction: column;      justify-content: space-between;  }</code></pre><p>2.3 居中上下布局<br><img src="/images/css/flex/15.png" alt="flex"></p><pre><code>.box.two3 {    flex-direction: column;    justify-content: space-between;    align-items: center;}</code></pre><p>2.4 右侧上下布局<br><img src="/images/css/flex/16.png" alt="flex"></p><pre><code>.box.two4 {    flex-direction: column;    justify-content: space-between;    align-items: flex-end;}</code></pre><p>2.5 左上右下布局<br><img src="/images/css/flex/17.png" alt="flex"></p><pre><code>.box.two3 {    justify-content: space-between;}.two3 .item:last-child {    align-self: flex-end;}</code></pre><h6 id="3-三项目"><a href="#3-三项目" class="headerlink" title="3. 三项目"></a>3. 三项目</h6><p>html模版</p><pre><code>&lt;div class=&quot;box&quot;&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p>3.1 一左二中三右布局<br><img src="/images/css/flex/18.png" alt="flex"></p><pre><code>.three1 {    flex-direction: column;}.three1 .item:nth-child(2) {    align-self: center;}.three1 .item:nth-child(3) {    align-self: flex-end;}</code></pre><p>3.2 一右二中三左布局<br><img src="/images/css/flex/19.png" alt="flex"></p><pre><code>.three2 {    flex-direction: column;    align-items: flex-end;}.three2 .item:nth-child(2) {    align-self: center;}.three2 .item:nth-child(3) {    align-self: flex-start;}</code></pre><h6 id="4-四项目"><a href="#4-四项目" class="headerlink" title="4. 四项目"></a>4. 四项目</h6><p>4.1 第一排铺满，最后一排右布局<br>模版：</p><pre><code>&lt;div class=&quot;box four1&quot;&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p>图：<br><img src="/images/css/flex/20.png" alt="flex"><br>样式：</p><pre><code>.four1 {    flex-wrap: wrap;    justify-content: flex-end;    align-content: space-between;}</code></pre><p>4.2 上下左右四个角布局<br>html模版:</p><pre><code>&lt;div class=&quot;box four2&quot;&gt;    &lt;div class=&quot;column&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;column&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre><p>图：<br><img src="/images/css/flex/21.png" alt="flex"></p><p>样式：</p><pre><code>.four2 {    flex-direction: column;    justify-content: space-between;}.column {    display: flex;    justify-content: space-between;}</code></pre><h6 id="5-五项目"><a href="#5-五项目" class="headerlink" title="5. 五项目"></a>5. 五项目</h6><p>html模版：</p><pre><code>&lt;div class=&quot;box four2&quot;&gt;    &lt;div class=&quot;column&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;column mid&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;column&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre><p>图：<br><img src="/images/css/flex/22.png" alt="flex"></p><p>样式：</p><pre><code>.four2 {    flex-direction: column;    justify-content: space-between;}.column {    display: flex;    justify-content: space-between;}.mid {    align-items: center;    justify-content: center;}</code></pre><h6 id="6-六项目"><a href="#6-六项目" class="headerlink" title="6. 六项目"></a>6. 六项目</h6><p>html模版：</p><pre><code>&lt;div class=&quot;box&quot;&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p>6.1 上三下三布局<br><img src="/images/css/flex/23.png" alt="flex"></p><pre><code>.s1 {    flex-wrap: wrap;    align-content: space-between;}</code></pre><p>6.2 左三右三布局<br><img src="/images/css/flex/24.png" alt="flex"></p><pre><code>.s2 {    flex-direction: column;    flex-wrap: wrap;    align-content: space-between;}</code></pre><h6 id="7-九项目"><a href="#7-九项目" class="headerlink" title="7 九项目"></a>7 九项目</h6><p>html模版：</p><pre><code>&lt;div class=&quot;box&quot;&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p>图：<br><img src="/images/css/flex/25.png" alt="flex"></p><p>样式：</p><pre><code>.n1 {    flex-wrap: wrap;}</code></pre><h6 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用flex布局很多情况下节省很多工作量，方便简单好用。特别手机端用的很多。</p><h6 id="六、完整代码没上传GitHub，这儿随便写了下符在下面。"><a href="#六、完整代码没上传GitHub，这儿随便写了下符在下面。" class="headerlink" title="六、完整代码没上传GitHub，这儿随便写了下符在下面。"></a>六、完整代码没上传GitHub，这儿随便写了下符在下面。</h6><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        body {            background: black;        }        .con {            margin: 50px;            display: flex;            flex-direction: row;        }        .box {            width: 60px;            height: 60px;            border: 1px solid white;            background: white;            border-radius: 5px;            display: flex;            margin: 10px;        }        .item {            width: 10px;            height: 10px;            background: black;            border-radius: 5px;            margin: 5px;        }        .box.one1 {            flex-direction: row;            justify-content: center;        }        .box.one2 {            flex-direction: row;            justify-content: flex-end;        }        .box.one3 {            flex-direction: row;            align-items: center;        }        .box.one4 {            flex-direction: row;            align-items: center;            justify-content: center;        }        .box.one5 {            align-items: center;            justify-content: flex-end;        }        .box.one6 {            align-items: flex-end;        }        .box.one7 {            align-items: flex-end;            justify-content: center;        }        .box.one8 {            align-items: flex-end;            justify-content: flex-end;        }        .box.two1 {            justify-content: space-between;        }        .box.two2 {            flex-direction: column;            justify-content: space-between;        }        .box.two21 {            flex-direction: column;            justify-content: space-between;            align-items: center;        }        .box.two22 {            flex-direction: column;            justify-content: space-between;            align-items: flex-end;        }        .box .item1 {            align-self: center;        }        .box.two3 {            justify-content: space-between;        }        .two3 .item:last-child {            align-self: flex-end;        }        .t1 {            flex-direction: column;        }        .t1 .item:nth-child(2) {            align-self: center;        }        .t1 .item:nth-child(3) {            align-self: flex-end;        }        .t2 {            flex-direction: column;            align-items: flex-end;        }        .t2 .item:nth-child(2) {            align-self: center;        }        .t2 .item:nth-child(3) {            align-self: flex-start;        }        .f1 {            flex-wrap: wrap;            justify-content: flex-end;            align-content: space-between;        }        .f2 {            flex-direction: column;            justify-content: space-between;        }        .column {            display: flex;            justify-content: space-between;        }        .mid {            align-items: center;            justify-content: center;        }        .s1 {            flex-wrap: wrap;            align-content: space-between;        }        .s2 {            flex-direction: column;            flex-wrap: wrap;            align-content: space-between;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- 1 --&gt;    &lt;div class=&quot;con&quot;&gt;        &lt;div class=&quot;box&quot;&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;box one1&quot;&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;box one2&quot;&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;box one3&quot;&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;box one4&quot;&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;box one5&quot;&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;box one6&quot;&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;box one7&quot;&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;box one8&quot;&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;!-- 2 --&gt;&lt;div class=&quot;con&quot;&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;box two1&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;box two2&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;box two21&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;box two22&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item item1&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;box two3&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;!-- 3 --&gt;&lt;div class=&quot;con&quot;&gt;    &lt;div class=&quot;box t1&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;box t2&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;!-- 4、5 --&gt;&lt;div class=&quot;con&quot;&gt;    &lt;div class=&quot;box f1&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;box f2&quot;&gt;        &lt;div class=&quot;column&quot;&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;column&quot;&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;box f2&quot;&gt;        &lt;div class=&quot;column&quot;&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;column mid&quot;&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;column&quot;&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;            &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;!-- 6、9 --&gt;&lt;div class=&quot;con&quot;&gt;    &lt;div class=&quot;box s1&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;box s2&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;box s1&quot;&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-数据结构-队列</title>
      <link href="/2018/12/18/dataStructure/js-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/"/>
      <url>/2018/12/18/dataStructure/js-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面讲过使用js模拟栈的算法，今天主要讲，使用js模拟队列的算法，为什么要这样做呢？说实话是闲的无聊，现在处于一个项目空档期，为了不至于太无聊，就想把数据结构里面的算法都使用js模拟一遍。</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h6 id="1、什么是队列？"><a href="#1、什么是队列？" class="headerlink" title="1、什么是队列？"></a>1、什么是队列？</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;想象中午食堂吃饭时、等电梯时、早晚高峰进地铁时，都需要排队。那么肯定是先排队的有优先权，然后依次进入。队列也是这个道理，只有一个出口，一个入口，特点是<code>先进先出</code>，这和栈的思想相反。明白了队列的特点，分析如何使用js实现队列？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;队列有一个入口，取名为<code>enqueue</code>;出口取名为<code>dequeue</code>;正常情况下，还需要读取队首和队尾元素，命名为<code>front</code>和<code>back</code>，读取队列所有元素，命名为<code>toStringData</code>, 判断队列是否空，命名为<code>isEmpty</code>。现在可以完成队列的构造函数了，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.data = [];</span><br><span class="line">    <span class="keyword">this</span>.enqueue = enqueue;  <span class="comment">//队尾添加一个元素</span></span><br><span class="line">    <span class="keyword">this</span>.dequeue = dequeue;  <span class="comment">//队首删除一个元素</span></span><br><span class="line">    <span class="keyword">this</span>.front = front;  <span class="comment">//读取队首元素</span></span><br><span class="line">    <span class="keyword">this</span>.back = back;  <span class="comment">//读取队尾元素</span></span><br><span class="line">    <span class="keyword">this</span>.toStringData = toStringData;  <span class="comment">//显示队内元素</span></span><br><span class="line">    <span class="keyword">this</span>.isEmpty = isEmpty;  <span class="comment">//判断队列是否为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="2、使用enqueue-方法，在队尾添加一个元素，如下："><a href="#2、使用enqueue-方法，在队尾添加一个元素，如下：" class="headerlink" title="2、使用enqueue()方法，在队尾添加一个元素，如下："></a>2、使用enqueue()方法，在队尾添加一个元素，如下：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enqueue</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.data.push(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3、使用dequeue-方法，在队首删除一个元素，并返回删除的值，如下："><a href="#3、使用dequeue-方法，在队首删除一个元素，并返回删除的值，如下：" class="headerlink" title="3、使用dequeue()方法，在队首删除一个元素，并返回删除的值，如下："></a>3、使用dequeue()方法，在队首删除一个元素，并返回删除的值，如下：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dequeue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.shift();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4、使用front-方法，返回队首元素，如下："><a href="#4、使用front-方法，返回队首元素，如下：" class="headerlink" title="4、使用front()方法，返回队首元素，如下："></a>4、使用front()方法，返回队首元素，如下：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">front</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">``</span><span class="string">`JavaScript</span></span><br><span class="line"><span class="string">###### 5、使用back()方法，返回队尾元素，如下：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>JavaScript</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">back</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.data.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="6、使用toStringData-方法，返回队列元素，如下："><a href="#6、使用toStringData-方法，返回队列元素，如下：" class="headerlink" title="6、使用toStringData()方法，返回队列元素，如下："></a>6、使用toStringData()方法，返回队列元素，如下：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toStringData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> queueString = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.data.length; i++) &#123;</span><br><span class="line">        queueString += <span class="keyword">this</span>.data[i] + <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> queueString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="7、使用isEmpty-方法，判断队列是否为空，如下："><a href="#7、使用isEmpty-方法，判断队列是否为空，如下：" class="headerlink" title="7、使用isEmpty()方法，判断队列是否为空，如下："></a>7、使用isEmpty()方法，判断队列是否为空，如下：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.length === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;到这里，就使用js实现了一个单向队列。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h6 id="1、使用队列进行排序（基数排序）"><a href="#1、使用队列进行排序（基数排序）" class="headerlink" title="1、使用队列进行排序（基数排序）"></a>1、使用队列进行排序（基数排序）</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先介绍下什么是<code>基数排序</code>，基数排序又叫<code>分配式排序</code>或<code>桶子法</code>，它是通过数据的部分信息，将要排序的元素分配至<code>桶</code>中，以达到排序的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设有一串数值，如下所示：</p><pre><code>98、25、31、10、99、81、65、42、51</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先根据个位数的数值，在走访数值时将它们分配至编号0到9的桶子中：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>： <span class="number">10</span></span><br><span class="line"><span class="number">1</span>： <span class="number">31</span> <span class="number">81</span> <span class="number">51</span></span><br><span class="line"><span class="number">2</span>： <span class="number">42</span></span><br><span class="line"><span class="number">3</span>：</span><br><span class="line"><span class="number">4</span>：</span><br><span class="line"><span class="number">5</span>： <span class="number">25</span> <span class="number">65</span></span><br><span class="line"><span class="number">6</span>：</span><br><span class="line"><span class="number">7</span>：</span><br><span class="line"><span class="number">8</span>： <span class="number">98</span></span><br><span class="line"><span class="number">9</span>： <span class="number">99</span></span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来将这些桶子中的数值串接起来，如下所示：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">10 </span><span class="number">31</span> <span class="number">81</span> <span class="number">51</span> <span class="number">42</span> <span class="number">25</span> <span class="number">65</span> <span class="number">98</span> <span class="number">99</span></span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接着根据十位数在进行一次分配，如下所示：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>：</span><br><span class="line"><span class="number">1</span>： <span class="number">10</span></span><br><span class="line"><span class="number">2</span>： <span class="number">25</span></span><br><span class="line"><span class="number">3</span>： <span class="number">31</span></span><br><span class="line"><span class="number">4</span>： <span class="number">42</span></span><br><span class="line"><span class="number">5</span>： <span class="number">51</span></span><br><span class="line"><span class="number">6</span>： <span class="number">65</span></span><br><span class="line"><span class="number">7</span>：</span><br><span class="line"><span class="number">8</span>： <span class="number">81</span></span><br><span class="line"><span class="number">9</span>： <span class="number">98</span> <span class="number">99</span></span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来将这些数值串接起来，形成以下数值：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">10 </span><span class="number">25</span> <span class="number">31</span> <span class="number">42</span> <span class="number">51</span> <span class="number">65</span> <span class="number">81</span> <span class="number">98</span> <span class="number">99</span></span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这时候排序已经完成；如果有三位数或这更高位数，则持续进行以上动作，直至最高位为止。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如何使用队列的思想进行排序呢？假设是0～99间的数进行比较，首先需要比较个位数，因为数值在0～99之间，只需对数进行<code>取余</code>,即可得到个位数，对数值除以10，向下取整可得到十位数。到这儿开始使用队列(<code>桶</code>)进行存值，需要是个队列分别存储0～9的值。如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  @param nums 初始数组</span></span><br><span class="line"><span class="comment"> *  @param queue 队列数组</span></span><br><span class="line"><span class="comment"> *  @param n 几位数</span></span><br><span class="line"><span class="comment"> *  @param digit 个位数或十位以上的数</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distribute</span> (<span class="params">nums, queue, n, digit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (digit === <span class="number">1</span>) &#123;</span><br><span class="line">            queue[nums[i] % <span class="number">10</span>].enqueue(nums[I]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            queue[<span class="built_in">Math</span>.floor(nums[i] / <span class="number">10</span>)].enqueue(nums[I]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基数排序后展示函数，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  @param queues 队列数组</span></span><br><span class="line"><span class="comment"> *  @nums nums 初始数组</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showAfterData</span> (<span class="params">queues, nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> digit = <span class="number">0</span>; digit &lt; <span class="number">10</span>; ++digit) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!queues[digit].isEmpty()) &#123;</span><br><span class="line">            nums[i++] = queues[digit].dequeue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;完成算法后，随机来点数实验下，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> queues = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">    queues[i] = <span class="keyword">new</span> Queue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> nums = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">    nums[i] = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">101</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'个位数排序：'</span>);</span><br><span class="line">distribute(nums, queues, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(collect(queues, nums));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'十位数排序：'</span>);</span><br><span class="line">distribute(nums, queues, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(collect(queues, nums));</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结果如下：<br><img src="https://upload-images.jianshu.io/upload_images/12926544-66be795cfa8c3659.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="基数排序结果"></p><h3 id="双向队列"><a href="#双向队列" class="headerlink" title="双向队列"></a>双向队列</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;双向队列即队列的首尾都能进能出，那么只需在单向队列中添加两个方法，队首添加一个元素方法(<code>fenqueue</code>)，队尾删除一个元素的方法(‘bdequeue’),即可.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;队列的构造函数添加两个方法，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.data = [];</span><br><span class="line">     <span class="keyword">this</span>.enqueue = enqueue;  <span class="comment">//队尾添加一个元素</span></span><br><span class="line">     <span class="keyword">this</span>.dequeue = dequeue;  <span class="comment">//队首删除一个元素</span></span><br><span class="line">     <span class="string">`this.fenqueue = fenqueue;  //队首添加一个元素`</span></span><br><span class="line">     <span class="string">`this.bdequeue = bdequeue;  //队尾删除一个元素`</span></span><br><span class="line">     <span class="keyword">this</span>.front = front;  <span class="comment">//读取队首元素</span></span><br><span class="line">     <span class="keyword">this</span>.back = back;  <span class="comment">//读取队尾元素</span></span><br><span class="line">     <span class="keyword">this</span>.toStringData = toStringData;  <span class="comment">//显示队内元素</span></span><br><span class="line">     <span class="keyword">this</span>.isEmpty = isEmpty;  <span class="comment">//判断队列是否为空</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fenqueue</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.data.unshift(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bdequeue</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在就完成了双向队列。双向队列能实现什么功能呢？如回文之类的使用双向队列能很方便的实现，思想如上一片文章中的栈，使用双向队列无论从前还是后插入数据，都一个原理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> data-structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-数据结构-栈</title>
      <link href="/2018/12/17/dataStructure/js-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/"/>
      <url>/2018/12/17/dataStructure/js-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;做前端已有几年的时间，各种前端技术学了一堆，换着技术开发网站，感觉自己很牛逼的样子。这段时间总感觉到达了瓶颈，怎么也突破不了，冷静想了下。功能的实现、封装什么都没问题，但是就是算法差强人意。把大学的数据结构拿出来翻了下，这阶段再去看算法，比大学期间清楚太多了，很多原来知道有那回事儿，现在能明白用途在什么地方。我想我找到了突破瓶颈的方式了。从这篇文章开始，我会陆续的把数据结构中的算法用原生js实现。</p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;栈是一种数据结构，栈只有一个入口和一个出口，它的特点是<code>LIFO(后入先出)</code>，即比如我们吃的罐装薯片，只有从顶部一片一片的拿出来，才能拿到底部。因为栈的<code>LIFO</code>的特点，所有任何不在栈顶元素都无法访问到，为了得到栈底元素，必须把上面的元素都拿走，才能访问。而栈是一种列表，在js中，可以通过数据的方式来存储。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;到这儿便有思路了，首先需要一个<code>data</code>存储数据，data是一个数组，因栈只能访问栈顶元素，需要一个变量<code>top</code>存储栈顶元素的位置，当入栈时<code>top + 1</code>,当出栈时，<code>top - 1</code>，那么入栈需要一个方法<code>s_push</code>,出栈需要一个方法<code>s_pop</code>，还需返回栈顶元素的方法<code>s_peek</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有时，需要清空栈、获取栈的长度或判断元素是否在栈内，以上方法是不够的，还需创建方法，s_clear(清空栈内元素)、s_length(获取栈的长度）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. 首先，需要创建一个Stack类的构造函数，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.s_top = <span class="number">0</span>; <span class="comment">//初始化栈顶位置为0</span></span><br><span class="line">    <span class="keyword">this</span>.s_data = [];   <span class="comment">//初始化空栈</span></span><br><span class="line">    <span class="keyword">this</span>.s_push = s_push;   <span class="comment">//入栈方法</span></span><br><span class="line">    <span class="keyword">this</span>.s_pop = s_pop;     <span class="comment">//出栈</span></span><br><span class="line">    <span class="keyword">this</span>.s_peek = s_peek; <span class="comment">//获取栈顶元素</span></span><br><span class="line">    <span class="keyword">this</span>.s_length = s_length; <span class="comment">//栈的长度</span></span><br><span class="line">    <span class="keyword">this</span>.s_clear = s_clear; <span class="comment">//清空栈</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 入栈，实现s_push方法，当向栈中压入新元素时，需要改变s_top对应栈的位置加1，然后指向数组下一个空位置。如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s_push</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.s_data[<span class="keyword">this</span>.s_top++] = element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3. 出栈，s_pop方法和入栈相仿，每次取出元素后，将s_top - 1，然后返回当前删除的值，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s_pop</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    --<span class="keyword">this</span>.s_top;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.s_data.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4. 获取栈顶元素，s_peek方法，栈顶的位置为s_top,只需要数组中取最后一个元素即可，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s_peek</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.s_data[<span class="keyword">this</span>.s_top - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5. 清空栈，s_clear方法，设置栈顶指向为0，清空存储数据，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s_clear</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.s_top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.s_data = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6. 获取栈的长度，s_length, 即s_top的值，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s_length</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.s_top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h6 id="1-使用栈模拟递归"><a href="#1-使用栈模拟递归" class="headerlink" title="1. 使用栈模拟递归"></a>1. 使用栈模拟递归</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如需要封装一个阶乘的函数，用递归的思想，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> num !== <span class="string">'number'</span>) <span class="keyword">return</span> num;</span><br><span class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么如果用栈的方式如何处理呢？只需将给定的数递减到1入栈，然后每次s_pop的时候会返回栈顶元素，循环栈，然后将s_pop的值相乘即可，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> num !== <span class="string">'number'</span>) <span class="keyword">return</span> num;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="keyword">new</span> Stack(),</span><br><span class="line">        facNum = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s.s_push(num--);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="keyword">while</span> (s.s_length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        facNum *= s.s_pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> facNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="2-判断回文"><a href="#2-判断回文" class="headerlink" title="2. 判断回文"></a>2. 判断回文</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先说下什么是回文，把相同的字符串或句子颠倒过来，产生首尾循环的句子，意思就是正序和倒叙的结果一样。如何使用栈的思想实现回文呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;栈的方法有一个pop操作，每次pop返回栈顶元素。那么可以将字符串先push进栈，然后pop即可得到一个逆序的字符串，比较是否相等即可，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> s = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="keyword">let</span> reverseStr = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        s.s_push(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (s.s_length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        reverseStr += s.s_pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> reverseStr === str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用栈的思想可以很方便的实现很多功能，比如判断表达式是否括号匹配等？不过说实话，在前端页面的开发中，用不到这些。有兴趣可以玩下，可以提升思维逻辑。</p>]]></content>
      
      
      <categories>
          
          <category> js数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data-structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-in-js框架style-components</title>
      <link href="/2018/11/27/react/style-component/"/>
      <url>/2018/11/27/react/style-component/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前端飞一般的发展中，衍生出各式各样的框架，框架的目的是减轻开发人员的开发难度，提高效率。以前网页开发的原则是<code>关注点分离</code>，意思是各种技术只负责自己的领域，不要混合在一起，形成耦合。如html、css、js代码分离。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;React的出现，这个原则不在实用，React是组件结构，强制把html、css、js写在一起。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> style = &#123;</span><br><span class="line">    <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">    <span class="string">'fontSize'</span>: <span class="string">'46px'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clickHandler = <span class="function"><span class="params">()</span> =&gt;</span> alert(<span class="string">'hi'</span>);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;h1 style=&#123;style&#125; onclick=&#123;clickHandler&#125;&gt;</span><br><span class="line">        Hello, world!</span><br><span class="line">    &lt;<span class="regexp">/h1&gt;,</span></span><br><span class="line"><span class="regexp">    document.getElementById('example')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面代码在一个js文件里，封装了结构、样式、逻辑，完全违背了<code>关注点分离</code>，很多人刚开始学习React很不适应，但是，这有利于组件的隔离，每个组件需要的代码不依赖于外部、组件之间没有耦合，方便复用。使用React的越来越多，组件模式深入人心，这种<code>关注点混合</code>的新写法逐渐成为主流。<br><img src="https://upload-images.jianshu.io/upload_images/12926544-78fb2ecaa29849c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="关注点混合"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表面上，React的写法是html、css、js混合写在一起，实际上是用js在写html、css。React对html的封装是<code>jsx</code>，那么对css的封装是什么呢？这就涉及到今天需要讲的内容<code>style-components</code>。</p><p><img src="https://upload-images.jianshu.io/upload_images/12926544-b23d58045a72fa6b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="css in js"></p><h3 id="什么是style-components"><a href="#什么是style-components" class="headerlink" title="什么是style-components"></a>什么是style-components</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style-components是针对React写的一套css in js框架，简单来讲就是在js中写css。相对于与预处理器(<code>sass、less</code>)的好处是，css in js使用的是js语法，不用重新再学习新技术，也不会多一道编译步骤。无疑会加快网页速度。如果有sass或less的开发经验，几分钟就可以学会style-components。</p><p><img src="https://upload-images.jianshu.io/upload_images/12926544-bd2a6d306912bb59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="style-components"></p><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><a href="https://www.styled-components.com/docs/basics" target="_blank" rel="noopener">https://www.styled-components.com/docs/basics</a></p><h6 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h6><p><code>npm install --save style-components</code></p><h6 id="2-基础用法"><a href="#2-基础用法" class="headerlink" title="2. 基础用法"></a>2. 基础用法</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style-components最基础的用法就是以组件的形式编写样式，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HomeWrapper = styled.div <span class="string">`</span></span><br><span class="line"><span class="string">  width: 960px;</span></span><br><span class="line"><span class="string">  margin: 0 auto;</span></span><br><span class="line"><span class="string">  overflow: hidden;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">const</span> HomeLeft = styled.div <span class="string">`</span></span><br><span class="line"><span class="string">  float: left;</span></span><br><span class="line"><span class="string">  width: 625px;</span></span><br><span class="line"><span class="string">  margin-left: 15px;</span></span><br><span class="line"><span class="string">  padding-top: 30px;</span></span><br><span class="line"><span class="string">  .bannder-img &#123;</span></span><br><span class="line"><span class="string">    width: 625px;</span></span><br><span class="line"><span class="string">    height: 270px;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">const</span> HomeRight = styled.div <span class="string">`</span></span><br><span class="line"><span class="string">  float: right;</span></span><br><span class="line"><span class="string">  width: 280px;</span></span><br><span class="line"><span class="string">  margin-left: 15px;</span></span><br><span class="line"><span class="string">  padding-top: 30px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line">render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;HomeWrapper&gt;</span><br><span class="line">            &lt;HomeLeft&gt;</span><br><span class="line">                left</span><br><span class="line">            &lt;<span class="regexp">/HomeLeft&gt;</span></span><br><span class="line"><span class="regexp">            &lt;HomeRight&gt;</span></span><br><span class="line"><span class="regexp">                right</span></span><br><span class="line"><span class="regexp">            &lt;/</span>HomeRight&gt;</span><br><span class="line">        &lt;<span class="regexp">/HomeWrapper&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>上面的代码定义了三个组件，分别为<code>HomeWrapper 、HomeLeft 、HomeRight</code>，这样每一个组件对应唯一的样式，不在出现样式污染的情况。</p><h6 id="2-全局样式"><a href="#2-全局样式" class="headerlink" title="2. 全局样式"></a>2. 全局样式</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每一个组件对应唯一的样式，那么需要设置全局样式怎么办呢？style-components的最新版提供了<code>createGlobalStyle</code>可以设置全局样式，如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createGlobalStyle &#125; from 'styled-components';</span><br><span class="line"></span><br><span class="line">const GrobalStyle = createGlobalStyle `</span><br><span class="line">  <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, <span class="selector-tag">applet</span>, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>,</span><br><span class="line">    <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">pre</span>,</span><br><span class="line">    <span class="selector-tag">a</span>, <span class="selector-tag">abbr</span>, <span class="selector-tag">acronym</span>, <span class="selector-tag">address</span>, <span class="selector-tag">big</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>,</span><br><span class="line">    <span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, <span class="selector-tag">s</span>, <span class="selector-tag">samp</span>,</span><br><span class="line">    <span class="selector-tag">small</span>, <span class="selector-tag">strike</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">sub</span>, <span class="selector-tag">sup</span>, <span class="selector-tag">tt</span>, <span class="selector-tag">var</span>,</span><br><span class="line">    <span class="selector-tag">b</span>, <span class="selector-tag">u</span>, <span class="selector-tag">i</span>, <span class="selector-tag">center</span>,</span><br><span class="line">    <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>,</span><br><span class="line">    <span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>,</span><br><span class="line">    <span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>,</span><br><span class="line">    <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, <span class="selector-tag">embed</span>,</span><br><span class="line">    <span class="selector-tag">figure</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>,</span><br><span class="line">    <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">output</span>, <span class="selector-tag">ruby</span>, <span class="selector-tag">section</span>, <span class="selector-tag">summary</span>,</span><br><span class="line">    <span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">font</span>: inherit;</span><br><span class="line">        <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* HTML5 display-role reset for older browsers */</span></span><br><span class="line">    <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>,</span><br><span class="line">    <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">blockquote</span>, <span class="selector-tag">q</span> &#123;</span><br><span class="line">        <span class="attribute">quotes</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">blockquote</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">blockquote</span><span class="selector-pseudo">:after</span>,</span><br><span class="line">    <span class="selector-tag">q</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">        <span class="attribute">content</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">table</span> &#123;</span><br><span class="line">        <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">        <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">font-face</span> &#123;</span><br><span class="line">      <span class="attribute">font-family</span>: <span class="string">'iconfont'</span>;  <span class="comment">/* project id 897264 */</span></span><br><span class="line">      <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'//at.alicdn.com/t/font_897264_7ma62sn10m3.eot'</span>);</span><br><span class="line">      <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'//at.alicdn.com/t/font_897264_7ma62sn10m3.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">'//at.alicdn.com/t/font_897264_7ma62sn10m3.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">'//at.alicdn.com/t/font_897264_7ma62sn10m3.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">'//at.alicdn.com/t/font_897264_7ma62sn10m3.svg#iconfont'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.iconfont</span> &#123;</span><br><span class="line">      <span class="attribute">font-family</span>:<span class="string">"iconfont"</span> <span class="meta">!important</span>;</span><br><span class="line">      <span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">      <span class="attribute">font-style</span>:normal;</span><br><span class="line">      <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">      <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;<span class="attribute">visibility</span>: hidden;<span class="attribute">display</span>: block;<span class="attribute">font-size</span>: <span class="number">0</span>;<span class="attribute">content</span>: <span class="string">"."</span>;<span class="attribute">clear</span>: both;<span class="attribute">height</span>: <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="selector-class">.clearfix</span> &#123;<span class="attribute">zoom</span>: <span class="number">1</span>;&#125;</span><br><span class="line">`;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">render</span>() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;<span class="selector-tag">Fragment</span>&gt;</span><br><span class="line">            &lt;Provider&gt;...&lt;/Provider&gt;</span><br><span class="line">            &lt;GrobalStyle/&gt;</span><br><span class="line">        &lt;/Fragment&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码<code>GrobalStyle</code>是全局样式组件，只需在React组件的最外层引入即可。</p><h6 id="3-图片引入"><a href="#3-图片引入" class="headerlink" title="3. 图片引入"></a>3. 图片引入</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;需要图片引入，如果像css一样的引入方式，会报错。正确的引入方式是import导入，再以变量的方式引入，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"><span class="keyword">import</span> logPic <span class="keyword">from</span> <span class="string">'../../statics/images/logo.png'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Logo = styled.div <span class="string">`</span></span><br><span class="line"><span class="string">  position: absolute;</span></span><br><span class="line"><span class="string">  top: 0;</span></span><br><span class="line"><span class="string">  left: 0;</span></span><br><span class="line"><span class="string">  width: 100px;</span></span><br><span class="line"><span class="string">  height: 56px;</span></span><br><span class="line"><span class="string">  background-image: url(<span class="subst">$&#123;logPic&#125;</span>);</span></span><br><span class="line"><span class="string">  background-size: contain;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure></p><p>上面的代码<code>logPic</code>是存放logo图片地址的变量，只需使用<code>${logPic}</code>的方式引入即可。如果是后台传过来的图片，如何使用的背景图呢？</p><h6 id="4-props"><a href="#4-props" class="headerlink" title="4. props"></a>4. props</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面提到的问题，可使用组件的传值。先看一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">recommendList.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">RecommendItem</span> <span class="attr">key</span>=<span class="string">&#123;item&#125;</span> <span class="attr">imgUrl</span>=<span class="string">&#123;item&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const RecommendItem = styled.div `</span></span><br><span class="line"><span class="xml">  width: 280px;</span></span><br><span class="line"><span class="xml">  height: 50px;</span></span><br><span class="line"><span class="xml">  background-image: url($&#123;(props) =&gt; props.imgUrl&#125;);</span></span><br><span class="line"><span class="xml">  background-size: contain;</span></span><br><span class="line"><span class="xml">`;</span></span><br></pre></td></tr></table></figure></p><p>从上面的例子，不难发现，父组件传入的值，会存放在子组件的props中，故操作props便能得到预期效果。</p><h6 id="5-标签属性"><a href="#5-标签属性" class="headerlink" title="5. 标签属性"></a>5. 标签属性</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用style-components，需要使用标签属性，如input 的placeholder，a标签的href等，style-components提供了属性<code>attrs</code>，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> NavSearch = styled.input.attrs(&#123;</span><br><span class="line">    placeholder: <span class="string">'搜索'</span>，</span><br><span class="line">    type: <span class="string">'text'</span></span><br><span class="line">&#125;) <span class="string">`</span></span><br><span class="line"><span class="string">  width: 160px;</span></span><br><span class="line"><span class="string">  height: 38px;</span></span><br><span class="line"><span class="string">  margin-top: 9px;</span></span><br><span class="line"><span class="string">  padding: 0 40px 0 20px;</span></span><br><span class="line"><span class="string">  box-sizing: border-box;</span></span><br><span class="line"><span class="string">  background-color: #eee;</span></span><br><span class="line"><span class="string">  outline: none;</span></span><br><span class="line"><span class="string">  border: none;</span></span><br><span class="line"><span class="string">  border-radius: 19px;</span></span><br><span class="line"><span class="string">  color: #666;</span></span><br><span class="line"><span class="string">  &amp;::placeholder &#123;</span></span><br><span class="line"><span class="string">    color: #999;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  &amp;.focused &#123;</span></span><br><span class="line"><span class="string">    width: 240px;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure></p><p>上面的代码，<code>attrs</code>里面是一个对象，如果需要多个属性，以对象的形式添加即可。</p><h6 id="6-塑造组件"><a href="#6-塑造组件" class="headerlink" title="6. 塑造组件"></a>6. 塑造组件</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一种情况，一些原本就已经是组件，需要给这些组件添加样式，这时需要用到塑造组件，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Link = <span class="function">(<span class="params">&#123;className , children&#125;</span>) =&gt;</span> (</span><br><span class="line">    &lt;a className=&#123;className&#125;&gt;</span><br><span class="line">        &#123;children&#125;</span><br><span class="line">    &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const StyledLink = styled(Link)`</span></span><br><span class="line"><span class="regexp">    color: palevioletred;</span></span><br><span class="line"><span class="regexp">`</span></span><br><span class="line"><span class="regexp">render(</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Link&gt;普通组件&lt;/</span>Link&gt;</span><br><span class="line">        &lt;StyledLink&gt;添加了样式的组件&lt;<span class="regexp">/StyledLink&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h6 id="7-继承"><a href="#7-继承" class="headerlink" title="7. 继承"></a>7. 继承</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果某一组件的样式会用到多个地方，不能每个地方都重新写一套样式，这样代码不够优雅。比如：一个button，有warning、有default、有primary等，这个button只是颜色不同，其他样式一样，这里便可用到继承。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> Button = styled.button<span class="string">`</span></span><br><span class="line"><span class="string">        line-height: 1.499;</span></span><br><span class="line"><span class="string">        display: inline-block;</span></span><br><span class="line"><span class="string">        font-weight: 400;</span></span><br><span class="line"><span class="string">        text-align: center;</span></span><br><span class="line"><span class="string">        -ms-touch-action: manipulation;</span></span><br><span class="line"><span class="string">        touch-action: manipulation;</span></span><br><span class="line"><span class="string">        cursor: pointer;</span></span><br><span class="line"><span class="string">        background-image: none;</span></span><br><span class="line"><span class="string">        border: 1px solid transparent;</span></span><br><span class="line"><span class="string">        white-space: nowrap;</span></span><br><span class="line"><span class="string">        padding: 0 15px;</span></span><br><span class="line"><span class="string">        font-size: 14px;</span></span><br><span class="line"><span class="string">        border-radius: 4px;</span></span><br><span class="line"><span class="string">        height: 32px;</span></span><br><span class="line"><span class="string">        -webkit-user-select: none;</span></span><br><span class="line"><span class="string">        -moz-user-select: none;</span></span><br><span class="line"><span class="string">        -ms-user-select: none;</span></span><br><span class="line"><span class="string">        user-select: none;</span></span><br><span class="line"><span class="string">        -webkit-transition: all .3s cubic-bezier(.645,.045,.355,1);</span></span><br><span class="line"><span class="string">        transition: all .3s cubic-bezier(.645,.045,.355,1);</span></span><br><span class="line"><span class="string">        position: relative;</span></span><br><span class="line"><span class="string">        -webkit-box-shadow: 0 2px 0 rgba(0,0,0,.015);</span></span><br><span class="line"><span class="string">        box-shadow: 0 2px 0 rgba(0,0,0,.015);</span></span><br><span class="line"><span class="string">        color: rgba(0,0,0,.65);</span></span><br><span class="line"><span class="string">        background-color: #fff;</span></span><br><span class="line"><span class="string">        border-color: #d9d9d9;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">    <span class="keyword">const</span> ButtonPrimary = styled(Button)<span class="string">`</span></span><br><span class="line"><span class="string">        color: #fff;</span></span><br><span class="line"><span class="string">        background-color: #1890ff;</span></span><br><span class="line"><span class="string">        border-color: #1890ff;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">    <span class="keyword">const</span> ButtonWarning = styled(Button)<span class="string">`</span></span><br><span class="line"><span class="string">        color: #f5222d;</span></span><br><span class="line"><span class="string">        background-color: #f5f5f5;</span></span><br><span class="line"><span class="string">        border-color: #d9d9d9;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">有人说，公用样式的组件完全可以写到全部样式里面，设置不同的class。这样做可行，但是为什么不直接去写css呢？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">###### 8. 动画</span></span><br><span class="line"><span class="string">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;官网上有这样一个例子，如下：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">    <span class="keyword">const</span> rotate = keyframes<span class="string">`</span></span><br><span class="line"><span class="string">      from &#123;</span></span><br><span class="line"><span class="string">        transform: rotate(0deg);</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      to &#123;</span></span><br><span class="line"><span class="string">        transform: rotate(360deg);</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Rotate = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">      display: inline-block;</span></span><br><span class="line"><span class="string">      animation: <span class="subst">$&#123;rotate&#125;</span> 2s linear infinite;</span></span><br><span class="line"><span class="string">      padding: 2rem 1rem;</span></span><br><span class="line"><span class="string">      font-size: 1.2rem;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line"></span><br><span class="line">    render(</span><br><span class="line">        &lt;Rotate&gt;&amp;lt; 💅 &amp;gt;<span class="xml"><span class="tag">&lt;/<span class="name">Rotate</span>&gt;</span></span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure></p><p>个人觉得，如果是简单的动画，直接以这样的方式去做，即可，如果动画比较复杂，建议使用react-transition-group框架有更好的体验。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style-components的常用用法介绍完成，当然官网上还有一些其他的用法，有兴趣可以了解下。使用style-components会随机生成一个class名称，这样不会污染到全局变量，当然因为随机生成，维护会增加难度，期待下一版能解决这个问题。</p>]]></content>
      
      
      <categories>
          
          <category> style-components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux管理状态-todoList实现</title>
      <link href="/2018/11/23/react/Redux%E7%AE%A1%E7%90%86%E7%8A%B6%E6%80%81-todoList%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/11/23/react/Redux%E7%AE%A1%E7%90%86%E7%8A%B6%E6%80%81-todoList%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Redux的学习，让人又爱又狠，爱它状态管理的便捷，恨它的文档让人一脸懵逼。总之学习Redux的过程痛并快乐着。为什么要些这篇文章？经历了从Redux文档一步一步爬过来，踩了无数地雷，死了无数脑细胞，连亲爱的头发也一天天离我远去，终于神功大成…。话说当年，文档已烂熟于心，本以为从此React江湖任我游，不想，刚出门就差点撞死在<code>Action</code>的门口；好不容易，将货(<code>data</code>),开着兰博基尼(<code>dispatch</code>)送到了仓库(<code>store</code>),不曾想，一堆相同的烂货(<code>initState</code>),陈列在仓库，散发着腐朽的味道，苍蝇呜呜呜的拍打着翅膀，仿佛在嘲笑着<del>傻逼傻逼</del>。拖着疲惫的步伐将货更换完成(<code>reducer</code>),开心的骑着电动小马达，越行越远…<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;写文章的目的为了记录学习新技术的心路历程，以及对当前学习技术的一个总结。顺便带着，如果正在学习，正在看的你有一点点帮助，那么人生便已圆满，废话已经写了这么多，如果不喜欢，欢迎来喷。一直坚信，做技术的，如果不在被喷中成长，就在喷子的口水中变成泼妇。</p><hr><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上一篇文章讲到使用react实现todoList,使用react做一些简单的页面交互可行，如果页面上的功能比较复杂，多组件之间的交互频繁，只是用react会使整个程序变得非常复杂，不利于维护，可能做到后面自己都不清楚数据是怎么走向的。怎么办呢？2014年Facebook就提出了Flux架构的概念，引发了一系列的实现。2015年，Redux的出现，将Flux与函数式变成结合在一起，很快就成为了前端的热门框架。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Redux是什么，其实Redux就是React的状态管理工具，当然React状态管理工具不止Redux，比如Mobx等，个人觉得使用Mobx更简单，本文主要介绍如何使用Redux一步一步使用页面功能开发。文章中会简单如何使用阿里的ReactUI组件antd。本文主要讲如何使用Redux管理React的状态，不会涉及太多的原理，想看原理，为啥不直接到官网去，带图的、彩色的、各国的都有，看的你不能自我、欲罢不能。</p><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;脚手架使用<code>create-react-app</code>, 不清楚如何安装，请看上一篇文章<a href="https://www.jianshu.com/p/60dea52bd960" target="_blank" rel="noopener">React的增删功能-todoList实现</a>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装Redux: <code>npm install -S redux</code></p><h3 id="二、Redux知识总览"><a href="#二、Redux知识总览" class="headerlink" title="二、Redux知识总览"></a>二、Redux知识总览</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Redux管理React状态的步骤。<code>Action</code>描述事件简单对象，它是改变<code>store</code>中<code>state</code>的唯一方法，通过<code>store.dispatch()</code>方法将<code>Action</code>传到<code>store</code>中。<code>Action</code>的作用只是传递数据，并没有更新数据，如何更新数据<code>Reducer</code>的工作。<code>Reducer</code>接收到<code>Action</code>传入的对应数据，更新数据后返回到store，更新页面。简化来讲，<code>用户触发事件 -&gt;action(dispatch分发) -&gt; store -&gt; Reducer更新数据 -&gt; 返回更新后的数据到store -&gt; 更新页面</code>。如下图：<br>    <img src="https://upload-images.jianshu.io/upload_images/12926544-a3205fe638c36463.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="redux流程图"></p><h3 id="三、Redux实现TodoList"><a href="#三、Redux实现TodoList" class="headerlink" title="三、Redux实现TodoList"></a>三、Redux实现TodoList</h3><h6 id="1-Action"><a href="#1-Action" class="headerlink" title="1. Action"></a>1. Action</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>Action</code>是把数据从应用传到<code>store</code>的有效载荷，它是<code>store</code>的<code>唯一</code>来源。通过<code>store.dispatch()</code>将数据传到<code>store</code>。<code>Action</code>是一个对象，里面必须有属性<code>type</code>,type是一个常量,type的作用是数据在Reducer中对应匹配数据使用。在这里我们可以思考下每一个<code>Action</code>都会有对应的type，那么一个网站必然会有很多的type，便于后期维护，最好把type放到统一的文件夹中进行管理。<br>   <code>Action</code>是一个对象，type表示Action的名称。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   type: INIT_LIST,</span><br><span class="line">   payload: data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码，Action的名称是<code>INIT_LIST</code>,它携带的信息是<code>data</code>数据。</p><h6 id="2-Action-Creator"><a href="#2-Action-Creator" class="headerlink" title="2. Action Creator"></a>2. Action Creator</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;View要发多少种信息，就会有多少个Action，如果每个都要写，那么会很麻烦，也不利于维护。使用ActionCreator.js统一管理所有的Action。同时Action的名称type，统一使用ActionTypes.js管理。名称可以随便取，不做强求。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> INIT_LIST = <span class="string">'init_list'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initListAction = <span class="function">(<span class="params">data</span>) =&gt;</span> (&#123;</span><br><span class="line">    type: INIT_LIST,</span><br><span class="line">    data</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>上面的代码<code>initListAction</code>函数就是一个Action。</p><h6 id="3-store-dispatch"><a href="#3-store-dispatch" class="headerlink" title="3. store.dispatch()"></a>3. store.dispatch()</h6><p>store.dispatch()是View发出Action的唯一方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(fn);</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: INIT_LIST,</span><br><span class="line">  data: <span class="string">'test'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>上面的代码，<code>store.dispatch</code>接收一个Action对象作为参数，发送给store。<br>结合<code>initListAction</code>，可改写成：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(initListAction(data));</span><br></pre></td></tr></table></figure></p><h6 id="4-Reducer"><a href="#4-Reducer" class="headerlink" title="4. Reducer"></a>4. Reducer</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Store收到Action后，必须给出新的state，这样View才能发生变化，计算state的过程交Reducer。Reducer是一个纯函数，即有什么样的输入就有什么样的输出。Reducer的写法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CHANGE_INPUT_VALUE, SUBMIT_BTN_ITEM, DELETE_ITEM, INIT_LIST &#125; <span class="keyword">from</span> <span class="string">'../actions/types'</span></span><br><span class="line"><span class="keyword">const</span> initialList = &#123;</span><br><span class="line">    inputValue: <span class="string">''</span>,</span><br><span class="line">    list: []</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> reducerList = <span class="function">(<span class="params">state = initialList, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> CHANGE_INPUT_VALUE:</span><br><span class="line">            <span class="keyword">const</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</span><br><span class="line">            newState.inputValue = action.inputValue;</span><br><span class="line">            <span class="keyword">return</span> newState;</span><br><span class="line">        <span class="keyword">case</span> SUBMIT_BTN_ITEM:</span><br><span class="line">            <span class="keyword">const</span> submitState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</span><br><span class="line">            <span class="built_in">console</span>.log(submitState);</span><br><span class="line">            submitState.list.push(submitState.inputValue);</span><br><span class="line">            submitState.inputValue = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">return</span> submitState;</span><br><span class="line">        <span class="keyword">case</span> DELETE_ITEM:</span><br><span class="line">            <span class="keyword">const</span> deleteState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</span><br><span class="line">            deleteState.list.splice(action.index);</span><br><span class="line">            <span class="keyword">return</span> deleteState;</span><br><span class="line">        <span class="keyword">case</span> INIT_LIST:</span><br><span class="line">            <span class="keyword">const</span> initState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</span><br><span class="line">            initState.list = action.data;</span><br><span class="line">            <span class="keyword">return</span> initState;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><pre><code>export default reducerList;</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面代码中，type放在公用的文件夹中管理，Action的type和Reduce的type必须一致。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因会有很多Action，故使用switch的方式。如果case下面的数据比较复杂，可以单独提出来进行处理。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>const newState = JSON.parse(JSON.stringify(state));</code>这句话的作用是深拷贝，目的是如果直接操作state,会影响其他View的数据。</p><h6 id="5-Store"><a href="#5-Store" class="headerlink" title="5. Store"></a>5. Store</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Store是保存数据的地方，整个应用只有一个Store。Redux提供了<code>createStore</code>函数来生成Store。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(fn);</span><br></pre></td></tr></table></figure></p><p>上面的代码，<code>createStore</code>接收另外一个函数作为参数，返回新生成的Store对象。</p><h6 id="6-store-subscribe"><a href="#6-store-subscribe" class="headerlink" title="6. store.subscribe()"></a>6. store.subscribe()</h6><p><code>store.subscribe()</code>是Store的监听函数，一旦state改变，就会自动执行这个函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br></pre></td></tr></table></figure></p><pre><code>store.subscribe(listener);</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;显然，只要把View的更新数据替换上面的<code>listener</code>,当state改变时，就能更新数据。<br>绑定事件监听，完成后需要解除事件，只需执行<code>listener</code>就会自动解除监听。</p><h6 id="7-store-getState"><a href="#7-store-getState" class="headerlink" title="7. store.getState"></a>7. store.getState</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在View中需要使用state中的数据，使用<code>store.getState</code>获取store中state数据，展示到页面即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(fn);</span><br><span class="line">store.getState(state);</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里面介绍了Redux一些基础的使用方法，一个完整的项目使用这样的方法，会比较繁琐，那么怎么办呢？下一节会讲到，中间键<code>redux-saga、redux-thunk</code>和异步的使用方法，同时会讲到antd UI组建的使用。想看源码请<a href="https://github.com/zhuLni/redux-todoList" target="_blank" rel="noopener">狠狠的点击这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-自定义滚动条</title>
      <link href="/2018/11/22/css/css-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%BB%9A%E5%8A%A8%E6%9D%A1/"/>
      <url>/2018/11/22/css/css-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%BB%9A%E5%8A%A8%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="1-初衷"><a href="#1-初衷" class="headerlink" title="1. 初衷"></a>1. 初衷</h3><p>   做了几年的前端了，做笔记都是在自己的网盘里面记录，每次翻原来的笔记，总感觉差了点什么，突然有一天，一声惊雷闪过，文字依旧是那点文字，读者只有唯一，为什么不能分享出来，分享踩过的坑，希望能帮助到正在看的你。</p><h3 id="2-为什么要自定义滚动条？"><a href="#2-为什么要自定义滚动条？" class="headerlink" title="2.为什么要自定义滚动条？"></a>2.为什么要自定义滚动条？</h3><p>一直觉得，滚动条用默认的就好了，没特殊需求为啥要自定义呢？之前做过一个自定义表格，功能有：超出一定的高度滚动起来，表头固定，没列有自定义右键菜单，如下：<br><img src="https://upload-images.jianshu.io/upload_images/12926544-f5dd600e4ca7a183.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="windows端自定义表格"><br>最近入手一台Mac，再看原来的代码，Mac竟然如此神奇，滚动条不占位置，还会显示隐藏，而我自定义的表格在Mac端出问题，因为表格自定义，使用的ul、li模拟的表格，滚动条在windows端占位，到Mac端不占位了，故出现表头和内容不对齐情况，如下：<br><img src="https://upload-images.jianshu.io/upload_images/12926544-7254682ee119f345.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Mac端自定义表格"><br>图中是有滚动条的，因Mac默认隐藏，故滚动条的<code>17px</code>导致错行。</p><h3 id="3-实现Mac端滚动条兼容"><a href="#3-实现Mac端滚动条兼容" class="headerlink" title="3. 实现Mac端滚动条兼容"></a>3. 实现Mac端滚动条兼容</h3><p>   要做到同时兼容windows和Mac，那么可以自定义滚动条，做法很简单，在全局的css样式中加入下面代码即可：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//自动移滚动条样式</span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-thumb</span>&#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(50,50,50,.3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-track</span>&#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(50,50,50,.1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、::-webkit-scrollbar   定义了滚动条整体的样式；<br>2、::-webkit-scrollbar-thumb  滑块部分；<br>3、::-webkit-scrollbar-thumb  轨道部分；</p><p>加上这个代码，在看下效果，自定义表格完美兼容Mac。<br><img src="https://upload-images.jianshu.io/upload_images/12926544-2e90bfc309a207a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>自定义滚动条有很多方式，这里只是展示了个人觉得比较简单的，还有很多插件可以实现，有兴趣的朋友可以自己玩一下。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-todoList实现</title>
      <link href="/2018/11/13/react/react-todoList%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/11/13/react/react-todoList%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p> React作为当前最火的框架之一，学习和使用已有一段时间，在这里记录下学习React的心得，纯属个人观点。在学习React之前，了解过Vue,和angular，个人比较喜欢React的开发模式，之前的开发用的比较多jquery的模板（artTemplate,hogan）之类的，和React中的jsx原理类似，因此被吸引。</p><p><img src="https://upload-images.jianshu.io/upload_images/12926544-5d9dd940c034f2b8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="一、-React的准备工作"><a href="#一、-React的准备工作" class="headerlink" title="一、 React的准备工作"></a>一、 React的准备工作</h2><p>   学习react有很多途径，可以看官网，可以看博客，可以看视频，这里比较推荐的做法是先看官网，了解基本知识后，做一些例子。然后再学习相关依赖，如<code>Redux、Mobx</code>之类的状态管理工具，之后的文章中会进一步讲解React相关依赖，有：<code>Redux、Mobx、Redux-thunk、Redux-saga、immutable、react-transition-group、antd、styled-components、prop-types</code>等。<br>   开始学习React需要一定的开发基础，如：<code>Es6、webpack</code>等。我学习React使用的是create-react-app脚手架，</p><h5 id="安装：npm-install-g-create-react-app"><a href="#安装：npm-install-g-create-react-app" class="headerlink" title="安装：npm install -g create-react-app"></a>安装：<code>npm install -g create-react-app</code></h5><h5 id="创建React应用：-create-react-app-my-app"><a href="#创建React应用：-create-react-app-my-app" class="headerlink" title="创建React应用： create-react-app my-app"></a>创建React应用： <code>create-react-app my-app</code></h5><pre><code>$ create-react-app my-appCreating a new React app in G:\GitHub\React-demo\my-app.Installing packages. This might take a couple of minutes.Installing react, react-dom, and react-scripts...</code></pre><h6 id="1、主要依赖react-react-dom-react-scripts"><a href="#1、主要依赖react-react-dom-react-scripts" class="headerlink" title="1、主要依赖react,react-dom,react-scripts"></a>1、主要依赖react,react-dom,react-scripts</h6><h6 id="2、目录结构"><a href="#2、目录结构" class="headerlink" title="2、目录结构"></a>2、目录结构</h6><p><img src="https://upload-images.jianshu.io/upload_images/12926544-b447353bf665529b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h6 id="3、运行-npm-start"><a href="#3、运行-npm-start" class="headerlink" title="3、运行 npm start"></a>3、运行 <code>npm start</code></h6><h6 id="4、打包-npm-run-build"><a href="#4、打包-npm-run-build" class="headerlink" title="4、打包 npm run build"></a>4、打包 <code>npm run build</code></h6><h2 id="二、正式开发"><a href="#二、正式开发" class="headerlink" title="二、正式开发"></a>二、正式开发</h2><p>1、使用react做一个输入框，点击提交在下面列表展示，点击对应的列表项，删除该项，如下：<br><img src="https://upload-images.jianshu.io/upload_images/12926544-0b9480173bf5297a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>2、项目的数据结构，首先分析需求，一个input框，一个button，一个列表。可以把input和button看成一个组件，列表看成一个组件。在state中的数据结构可以设置为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//state的数据结构</span></span><br><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">    inputValue: <span class="string">''</span>, <span class="comment">//用于存放input的值</span></span><br><span class="line">    list: []        <span class="comment">//存放列表的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>input框功能实现，原理：input框绑定onChange事件，每当输入字符时，改变this.state.inputValue的值，React中当state或props中的值改变，render函数会重新执行。实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一：改变this.state.inputValue值，通过事件返回的e.target.value,获取输入框中的值</span></span><br><span class="line">&lt;input type=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; value=&#123;<span class="keyword">this</span>.state.inputValue&#125; /&gt;</span><br><span class="line">handleChange (e) &#123;</span><br><span class="line">    <span class="comment">//同步setState</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        inputValue: e.target.value</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：在input框上设置ref属性，ref表示对组件真正实例的引用。</span></span><br><span class="line"><span class="comment">//设置ref=&#123;(input) =&gt; &#123;this.input = input&#125;&#125;表示，将当前input框中的value值，</span></span><br><span class="line"><span class="comment">//绑定到this上，在handleChange方法中，便可以直接取input的值：this.input.value</span></span><br><span class="line">&lt;input type=<span class="string">"text"</span></span><br><span class="line">       id=<span class="string">"inputValue"</span></span><br><span class="line">       onChange=&#123;<span class="keyword">this</span>.handleChange&#125;</span><br><span class="line">       value=&#123;<span class="keyword">this</span>.state.inputValue&#125;</span><br><span class="line">       ref=&#123;(input) =&gt; &#123;<span class="keyword">this</span>.input = input&#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line">handleChange (e) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.input.value;</span><br><span class="line">    <span class="comment">//异步setState，可以为异步方法，带有一个参数prevState,即为上一步state的内容，同时带有回调函数</span></span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">        inputValue: value</span><br><span class="line">    &#125;), () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'赋值完成！'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提交功能实现，原理：很容易就想到，当点击提交的时候，将input框中的值push到this.state.list即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/提交添加UI列表</span></span><br><span class="line"><span class="regexp">handleSubmit () &#123;</span></span><br><span class="line"><span class="regexp">    this.setState((prevState) =&gt; (&#123;</span></span><br><span class="line"><span class="regexp">        list: [...prevState.list, prevState.inputValue],</span></span><br><span class="line"><span class="regexp">        inputValue: ''</span></span><br><span class="line"><span class="regexp">    &#125;), () =&gt; &#123; /</span><span class="regexp">/回调函数</span></span><br><span class="line"><span class="regexp">        console.log(this.ul.querySelectorAll('li').length);</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>将list的值在页面展示出来,可以通过map方法，循环li。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state.list.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    注：react中循环的时候，必须在每一项加上key的属性，不然控制台会报错，</span></span><br><span class="line"><span class="comment">    原因是：diff算法在循环的时候,会去匹配对应的key值。此处用index作为key值是不合理的做法，key值应该是唯一的，</span></span><br><span class="line"><span class="comment">    diff算法后面会详细讲到。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>点击li，删除当前li,原理：每一个li都有对应的index，点击li时，获取index，在list找到对应下标，然后delete即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state.list.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleDeleteItem.bind(this,</span> <span class="attr">index</span>)&#125;&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//删除当前点击item</span></span><br><span class="line">handleDelete (index) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> list = [...prevState.list];</span><br><span class="line">        list.splice(index, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            list: list</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><h6 id="React的原理"><a href="#React的原理" class="headerlink" title="React的原理"></a>React的原理</h6><blockquote><pre><code>1. state改变2. jsx模板3. 数据 + 模板 生成虚拟dom（虚拟DOM就是一个js对象，用来描述真实的DOM）（损耗了性能）4. 用虚拟DOM结构生成真实的DOM，来显示5. state改变6. 数据 + 模板 生成新的虚拟DOM（极大的提升了性能）7. 比较原始虚拟DOM和新的虚拟DOM的区别，找到区别（diff算法）8. 直接操作DOM，改变不同之处</code></pre></blockquote><h6 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h6><blockquote><pre><code> 1. 同层对比（变化前和变化后，虚拟DOM同一级进行对比）2. 列表（每个循环的列表都需要一个唯一的key，用于做对比，节约性能，因此用循环的index作为key是不靠谱的做法，浪费性能）3. 组件（一个React的APP有多个组件进行组成，diff对比组件的class）4. 绘制    1). 当调用setState时，React将其标记为Dirty，然后事件轮询介绍时，React会查询dirty组件并重新绘制    2). 当组件的setState方法被调用，组件会重新绘制它的子组件5. react事件委托（通过事件冒泡至document处，合成对象(SyntheticEvent)，当触发事件时，通过dispatchEvent分发函数分发）</code></pre></blockquote><h6 id="生命周期函数（在某一时刻组件会自动执行调用的函数）"><a href="#生命周期函数（在某一时刻组件会自动执行调用的函数）" class="headerlink" title="生命周期函数（在某一时刻组件会自动执行调用的函数）"></a>生命周期函数（在某一时刻组件会自动执行调用的函数）</h6><blockquote><pre><code>1. initialization (constructor) 初始化2. Mounting (组件第一次挂载的流程)    1). componentWillMount 在组件即将被挂载到页面的时刻执行，即render前执行    2). render    3). componentDidMount 在组件挂载到页面的时刻执行3. Updation    1). componentWillReceiveProps 从父组件接收参数并且这个组件在之前就存在父组件中 （props）    2). shouldComponentUpdate 在更新前调用，如果该组件返回true,往下执行，否则停止    3). componentWillUpdate 在更新前调用，shouldComponentUpdate返回true之后    4). render    5). componentDidUpdate 更新之后调用4. Unmounting    1). componentWillUnmount 即将被页面移除的时候执行</code></pre></blockquote><h6 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h6><p>本文使用react做了一个添加删除的功能，代码已放在GitHub上，有兴趣请<strong><a href="https://github.com/zhuLni/todoList" target="_blank" rel="noopener">狠狠的点击这儿</a></strong>。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IE下input框后面默认带有X，去除方法</title>
      <link href="/2018/09/12/css/IE%E4%B8%8Binput%E6%A1%86%E5%90%8E%E9%9D%A2%E9%BB%98%E8%AE%A4%E5%B8%A6%E6%9C%89X%EF%BC%8C%E5%8E%BB%E9%99%A4%E6%96%B9%E6%B3%95/"/>
      <url>/2018/09/12/css/IE%E4%B8%8Binput%E6%A1%86%E5%90%8E%E9%9D%A2%E9%BB%98%E8%AE%A4%E5%B8%A6%E6%9C%89X%EF%BC%8C%E5%8E%BB%E9%99%A4%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在IE9下，input框带有X,如何去除？<br><img src="https://upload-images.jianshu.io/upload_images/12926544-6a5a267109999018.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TIM图片20180912105825.png"></p><p>去除IE下input带x的方法，很简单，只需要css中加一句话就行了<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//去除IE下input框后面的X</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-ms-clear</span>, <span class="selector-tag">input</span><span class="selector-pseudo">::-ms-reveal</span>&#123;</span><br><span class="line">      <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义鼠标右键</title>
      <link href="/2018/09/11/jQuery/jQuery-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE/"/>
      <url>/2018/09/11/jQuery/jQuery-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、自定义鼠标右键的实现原理"><a href="#一、自定义鼠标右键的实现原理" class="headerlink" title="一、自定义鼠标右键的实现原理"></a>一、自定义鼠标右键的实现原理</h1><p><img src="https://upload-images.jianshu.io/upload_images/12926544-0fba8e14b4e89680.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TIM图片20180911164755.png"></p><p>自定义右键菜单功能，需清楚，所有浏览器都自带了右键功能，那么自定义右键菜单，需要先屏蔽系统自带的右键功能，如何实现呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$selector.on(<span class="string">'contextmenu'</span>, <span class="string">'.box'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>注：$selector为选择器，.box为禁用鼠标右键的class<br>完成系统自带鼠标右键的禁用后，开始自定义鼠标右键。</p><hr><p>获取鼠标事件的方法，使用mousedown,获取后需区分是鼠标左键还是右键，事件返回的参数event中，event.which为3表示右键，为1表示左键，为2表示中键。如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#box"</span>).mousedown(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="number">3</span> === e.which)&#123;</span><br><span class="line">           alert(<span class="string">"这 是右键单击事件"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">1</span> === e.which)&#123;</span><br><span class="line">               alert(<span class="string">"这 是左键单击事件"</span>);</span><br><span class="line">         &#125;  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span>  ===  e.which)  &#123;</span><br><span class="line">            alert(<span class="string">"这是鼠标中键"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><hr><h1 id="二、自定义鼠标右键实例（表格行右键自定菜单）"><a href="#二、自定义鼠标右键实例（表格行右键自定菜单）" class="headerlink" title="二、自定义鼠标右键实例（表格行右键自定菜单）"></a>二、自定义鼠标右键实例（表格行右键自定菜单）</h1><h4 id="html"><a href="#html" class="headerlink" title="html:"></a>html:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-list"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-thead "</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"table-col"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"save-item"</span> <span class="attr">title</span>=<span class="string">"名称"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"save-item"</span> <span class="attr">title</span>=<span class="string">"类型"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span>&gt;</span>类型<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"save-item"</span> <span class="attr">title</span>=<span class="string">"数据"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span>&gt;</span>数据<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"save-item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-tbody"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"table-col saveCol"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"save-item"</span> <span class="attr">title</span>=<span class="string">"test1"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"save-item"</span> <span class="attr">title</span>=<span class="string">"test2"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"save-item"</span> <span class="attr">title</span>=<span class="string">"test3"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span>&gt;</span>test3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"save-item"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"point-icon opratePointDrop"</span> <span class="attr">data-toggle</span>=<span class="string">"close"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"oprate-dropdown opDropDown none"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"op-item btn-mySaveRun"</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">span</span>&gt;</span>运行<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"op-item btn-mySaveRename"</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">span</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"op-item btn-mySaveEdit"</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">span</span>&gt;</span>刷新<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"op-item btn-mySaveDelete"</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">span</span>&gt;</span>导出<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"table-col saveCol"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"save-item"</span> <span class="attr">title</span>=<span class="string">"test1"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"save-item"</span> <span class="attr">title</span>=<span class="string">"test2"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"save-item"</span> <span class="attr">title</span>=<span class="string">"test3"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span>&gt;</span>test3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"save-item"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"point-icon opratePointDrop"</span> <span class="attr">data-toggle</span>=<span class="string">"close"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"oprate-dropdown opDropDown none"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"op-item btn-mySaveRun"</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">span</span>&gt;</span>运行<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"op-item btn-mySaveRename"</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">span</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"op-item btn-mySaveEdit"</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">span</span>&gt;</span>刷新<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"op-item btn-mySaveDelete"</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">span</span>&gt;</span>导出<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"table-col saveCol"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"save-item"</span> <span class="attr">title</span>=<span class="string">"test1"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"save-item"</span> <span class="attr">title</span>=<span class="string">"test2"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"save-item"</span> <span class="attr">title</span>=<span class="string">"test3"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span>&gt;</span>test3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"save-item"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"point-icon opratePointDrop"</span> <span class="attr">data-toggle</span>=<span class="string">"close"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"oprate-dropdown opDropDown none"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"op-item btn-mySaveRun"</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">span</span>&gt;</span>运行<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"op-item btn-mySaveRename"</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">span</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"op-item btn-mySaveEdit"</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">span</span>&gt;</span>刷新<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"op-item btn-mySaveDelete"</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">span</span>&gt;</span>导出<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="css"><a href="#css" class="headerlink" title="css:"></a>css:</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">ul</span> <span class="selector-tag">li</span>, <span class="selector-tag">ol</span> <span class="selector-tag">li</span>, <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.none</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自定义table */</span></span><br><span class="line"><span class="selector-class">.table-list</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.table-list</span> <span class="selector-class">.table-tbody</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">225px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.table-list</span> <span class="selector-class">.table-thead</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.table-thead</span> &gt; <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.table-tbody</span> &gt; <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.table-tbody</span> &gt; <span class="selector-tag">ul</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.table-thead</span>, <span class="selector-class">.table-tbody</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.table-thead</span> &gt; <span class="selector-tag">ul</span>, <span class="selector-class">.table-tbody</span> &gt; <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.table-thead</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span>, <span class="selector-class">.table-tbody</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">font</span>: normal <span class="number">12px</span>/<span class="number">36px</span> <span class="string">'Microsoft YaHei'</span>, <span class="string">'Arial'</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d9d9d9</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.table-thead</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>, <span class="selector-class">.table-tbody</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#d9d9d9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.table-thead</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">span</span>, <span class="selector-class">.table-tbody</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 下拉 */</span></span><br><span class="line"><span class="selector-class">.oprate-dropdown</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d9d9d9</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/* 禁用选择字体 */</span></span><br><span class="line">    <span class="attribute">-moz-user-select</span>: none; <span class="comment">/*火狐*/</span></span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none; <span class="comment">/*webkit浏览器*/</span></span><br><span class="line">    <span class="attribute">-ms-user-select</span>: none; <span class="comment">/*IE10*/</span></span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.oprate-dropdown</span> <span class="selector-tag">li</span><span class="selector-class">.op-item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.oprate-dropdown</span> <span class="selector-tag">li</span><span class="selector-class">.op-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#f2f3f6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.oprate-dropdown</span> <span class="selector-tag">li</span><span class="selector-class">.op-item</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#d9d9d9</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#2a313f</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.oprate-dropdown</span> <span class="selector-tag">li</span><span class="selector-class">.op-item</span> <span class="selector-class">.op-icon</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.point-icon</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../image/point-icon.png) no-repeat;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="js"><a href="#js" class="headerlink" title="js:"></a>js:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _rightMenu = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        _this.rightMenuOprate();</span><br><span class="line">    &#125;,</span><br><span class="line">    rightMenuOprate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $searchPart = $(<span class="string">'.box'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作点击下拉</span></span><br><span class="line">        $searchPart.on(<span class="string">'click'</span>, <span class="string">'.opratePointDrop'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            e.stopPropagation();</span><br><span class="line">            <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</span><br><span class="line">                _isOpen = $<span class="keyword">this</span>.attr(<span class="string">'data-toggle'</span>),</span><br><span class="line">                $dropDown = $<span class="keyword">this</span>.next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//清空所有显示下拉</span></span><br><span class="line">            $searchPart.find(<span class="string">'.opDropDown'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span><br><span class="line">                $<span class="keyword">this</span>.hide();</span><br><span class="line">                $<span class="keyword">this</span>.prev().attr(<span class="string">'data-toggle'</span>, <span class="string">'close'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (_isOpen === <span class="string">'close'</span>) &#123;</span><br><span class="line">                $dropDown.show().css(<span class="string">'left'</span>, <span class="string">''</span>);</span><br><span class="line">                $<span class="keyword">this</span>.attr(<span class="string">'data-toggle'</span>, <span class="string">'open'</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_isOpen === <span class="string">'open'</span>) &#123;</span><br><span class="line">                $dropDown.hide();</span><br><span class="line">                $<span class="keyword">this</span>.attr(<span class="string">'data-toggle'</span>, <span class="string">'close'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//禁止鼠标右键事件</span></span><br><span class="line">        $searchPart.on(<span class="string">'contextmenu'</span>, <span class="string">'.saveCol'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//鼠标右键</span></span><br><span class="line">        $searchPart.on(<span class="string">'mousedown'</span>, <span class="string">'.saveCol'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            e.stopPropagation();</span><br><span class="line">            <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">3</span> === e.which) &#123;</span><br><span class="line">                <span class="comment">//隐藏其他展开的下拉</span></span><br><span class="line">                $searchPart.find(<span class="string">'.opDropDown'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span><br><span class="line">                    $<span class="keyword">this</span>.hide();</span><br><span class="line">                    $<span class="keyword">this</span>.prev().attr(<span class="string">'data-toggle'</span>, <span class="string">'close'</span>);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                $<span class="keyword">this</span>.find(<span class="string">'.opDropDown'</span>).show().css(&#123;</span><br><span class="line">                    <span class="string">'left'</span>: e.pageX - <span class="number">50</span>  + <span class="string">'px'</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//点击清除</span></span><br><span class="line">        $(<span class="built_in">document</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//兼容火狐</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> === e.which) &#123;</span><br><span class="line">                $searchPart.find(<span class="string">'.opratePointDrop'</span>).attr(<span class="string">'data-toggle'</span>, <span class="string">'close'</span>);</span><br><span class="line">                $searchPart.find(<span class="string">'.opDropDown'</span>).hide();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    _rightMenu.init();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> jQuery自定义功能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
